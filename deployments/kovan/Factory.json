{
  "address": "0x939A523f4E0eD100FF095BE1CB160A634Ad93AdA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_permissionManagerContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_storageContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AddAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "AddPaymentMethod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "AddPaymentMethodCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "RemovePaymentMethod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "RemovePaymentMethodCategory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "SetPermissionManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "SetStorage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "UpdateAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "UpdatePaymentMethod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "UpdatePaymentMethodCategory",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERMISSION_MANAGER",
      "outputs": [
        {
          "internalType": "contract IPermissionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STORAGE_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPegged",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "peggedAssetGateway",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "originalName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "originalSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "priceFeedProvider",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "priceFeedContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "addAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPaymentWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPaymentWindow",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "countries",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "continents",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "addPaymentMethod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "addPaymentMethodCategory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isPegged",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "peggedAssetGateway",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "originalName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "originalSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "priceFeedProvider",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "priceFeedContract",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetsStructs.AssetItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllConfigs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "_key",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "_value",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ConfigsStructs.ConfigItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isPegged",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "peggedAssetGateway",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "originalName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "originalSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "priceFeedProvider",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "priceFeedContract",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetsStructs.AssetItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getAssetById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isPegged",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "peggedAssetGateway",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "originalName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "originalSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "priceFeedProvider",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "priceFeedContract",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetsStructs.AssetItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataStore",
      "outputs": [
        {
          "internalType": "contract IStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_asset",
          "type": "string"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getPaymentMethod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "categoryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "countries",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "continents",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct PaymentMethodsStructs.PaymentMethodItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentMethods",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "categoryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "countries",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "continents",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct PaymentMethodsStructs.PaymentMethodItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentMethodsAndCategories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct PaymentMethodsStructs.CategoryItem[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "categoryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "countries",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "continents",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct PaymentMethodsStructs.PaymentMethodItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentMethodsByCategory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "categoryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "countries",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "continents",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct PaymentMethodsStructs.PaymentMethodItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentMethodsCategories",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct PaymentMethodsStructs.CategoryItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_asset",
          "type": "string"
        }
      ],
      "name": "getPriceFeedContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPaymentMethods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPaymentMethodsCategories",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "roleName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "roleName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "isAssetSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isValidAssetItem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providerName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "removePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "removePaymentMethodCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_asset",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "setAssetPriceFeedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "setConfigData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setPermissionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageContract",
          "type": "address"
        }
      ],
      "name": "setStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_text",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_params",
          "type": "string"
        }
      ],
      "name": "statusMsg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_text",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_params",
          "type": "bytes32"
        }
      ],
      "name": "statusMsg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_text",
          "type": "string"
        }
      ],
      "name": "statusMsg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_data",
          "type": "string"
        }
      ],
      "name": "toBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_data",
          "type": "uint256"
        }
      ],
      "name": "toBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_data",
          "type": "address"
        }
      ],
      "name": "toBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPegged",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "peggedAssetGateway",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "originalName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "originalSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "priceFeedProvider",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "priceFeedContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "updateAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "categoryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPaymentWindow",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "countries",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "continents",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct PaymentMethodsStructs.PaymentMethodItem",
          "name": "_dataToSave",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "updatePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newCategoryName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "updatePaymentMethodCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c15dbc0d652b0e79c86a3e54d016832afc73e01d9fbf8c0093a8b25e12a90ca",
  "receipt": {
    "to": null,
    "from": "0xBDE658ba6aaf6c9f7938820b69D47F099Bc5ea23",
    "contractAddress": "0x939A523f4E0eD100FF095BE1CB160A634Ad93AdA",
    "transactionIndex": 0,
    "gasUsed": "3643301",
    "logsBloom": "0x
    "blockHash": "0x2f829404dd1f42fa94a9cb907722baff52682c4744f692cd8980d90994fd3273",
    "transactionHash": "0x4c15dbc0d652b0e79c86a3e54d016832afc73e01d9fbf8c0093a8b25e12a90ca",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24564891,
        "transactionHash": "0x4c15dbc0d652b0e79c86a3e54d016832afc73e01d9fbf8c0093a8b25e12a90ca",
        "address": "0x939A523f4E0eD100FF095BE1CB160A634Ad93AdA",
        "topics": [
          "0x42efee88e49f0921043269e91c7b4f5bfb699d653f5dc2d161a9c19d87da9664",
          "0x0000000000000000000000009fa14091f1434d6474897ba732fadfd4f677ded5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2f829404dd1f42fa94a9cb907722baff52682c4744f692cd8980d90994fd3273"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 24564891,
        "transactionHash": "0x4c15dbc0d652b0e79c86a3e54d016832afc73e01d9fbf8c0093a8b25e12a90ca",
        "address": "0x939A523f4E0eD100FF095BE1CB160A634Ad93AdA",
        "topics": [
          "0xbed5d690d7485891a709a800c39a0328cac99afa5f118a4cd4a174b9dc262637",
          "0x00000000000000000000000001460e3f9e8a40da2efc3aed0deff0e7fa0a46e7"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2f829404dd1f42fa94a9cb907722baff52682c4744f692cd8980d90994fd3273"
      }
    ],
    "blockNumber": 24564891,
    "cumulativeGasUsed": "3643301",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fA14091f1434d6474897BA732fADfD4F677DED5",
    "0x01460e3F9E8A40dA2EFc3aeD0dEff0e7FA0A46e7"
  ],
  "solcInputHash": "089d952b7f88b34afffa9873dbe81ce6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissionManagerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storageContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"AddPaymentMethod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"AddPaymentMethodCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"RemovePaymentMethod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"RemovePaymentMethodCategory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetPermissionManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"SetStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UpdateAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"UpdatePaymentMethod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"UpdatePaymentMethodCategory\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"contract IPermissionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORAGE_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"peggedAssetGateway\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"priceFeedProvider\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"priceFeedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"addAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"continents\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"addPaymentMethod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"addPaymentMethodCategory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"peggedAssetGateway\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"priceFeedProvider\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"priceFeedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetsStructs.AssetItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllConfigs\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"internalType\":\"struct ConfigsStructs.ConfigItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"getAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"peggedAssetGateway\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"priceFeedProvider\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"priceFeedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetsStructs.AssetItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAssetById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"peggedAssetGateway\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"priceFeedProvider\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"priceFeedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetsStructs.AssetItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataStore\",\"outputs\":[{\"internalType\":\"contract IStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_asset\",\"type\":\"string\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPaymentMethod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"continents\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethodsStructs.PaymentMethodItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentMethods\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"continents\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethodsStructs.PaymentMethodItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentMethodsAndCategories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethodsStructs.CategoryItem[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"continents\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethodsStructs.PaymentMethodItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"getPaymentMethodsByCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"continents\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethodsStructs.PaymentMethodItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentMethodsCategories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethodsStructs.CategoryItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_asset\",\"type\":\"string\"}],\"name\":\"getPriceFeedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPaymentMethods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPaymentMethodsCategories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"isAssetSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isValidAssetItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removePaymentMethodCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_asset\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setAssetPriceFeedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setConfigData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setPermissionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageContract\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_params\",\"type\":\"string\"}],\"name\":\"statusMsg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_params\",\"type\":\"bytes32\"}],\"name\":\"statusMsg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"statusMsg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"toBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"toBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_data\",\"type\":\"address\"}],\"name\":\"toBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"peggedAssetGateway\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"originalName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"originalSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"priceFeedProvider\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"priceFeedContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"updateAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPaymentWindow\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"continents\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethodsStructs.PaymentMethodItem\",\"name\":\"_dataToSave\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"updatePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newCategoryName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"updatePaymentMethodCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAsset(address,bool,address,string,string,string,address,bool)\":{\"details\":\"add a new asset to supported list\",\"params\":{\"contractAddress\":\"asset's contract address\",\"isEnabled\":\"if contract is enabled\",\"isPegged\":\"a  boolean describing wether its pegged  or not\",\"originalName\":\"if pegged, then original asset name\",\"originalSymbol\":\"if pegged, the original symbol\",\"peggedAssetGateway\":\"gateway for interacting with the asset\"}},\"addPaymentMethod(string,uint256,uint256,uint256,string[],string[],bool)\":{\"details\":\"add a new payment method\",\"params\":{\"categoryId\":\"category id for the new payment  type\",\"continents\":\"Supported continents\",\"countries\":\"supported countries\",\"isEnabled\":\"is this payment method enabled\",\"name\":\"payment method name\"},\"returns\":{\"_0\":\"uint256\"}},\"addPaymentMethodCategory(string,bool)\":{\"details\":\"add a new payment type category\",\"params\":{\"name\":\"category name in string\"},\"returns\":{\"_0\":\"uint256 new category  id\"}},\"getAllAssets()\":{\"details\":\"get all assets \"},\"getAsset(address)\":{\"details\":\"fetch asset by it contract address\",\"params\":{\"_contractAddress\":\"asset's contract address\"},\"returns\":{\"_0\":\"AssetsStructs.AssetItem\"}},\"getAssetById(uint256)\":{\"details\":\"getAssetById\",\"params\":{\"_id\":\"asset id\"}},\"getChainID()\":{\"details\":\"get chain id\"},\"getConfig(string)\":{\"params\":{\"_key\":\"config key \"}},\"getDataStore()\":{\"details\":\"this returns an instance of he same contract\"},\"getLatestPrice(string)\":{\"details\":\"get latest price\",\"params\":{\"_asset\":\"the asset which we need latest price for\"}},\"getPaymentMethod(uint256)\":{\"details\":\"getPaymentMethod\",\"params\":{\"_id\":\"paymentMethod id\"}},\"getPaymentMethods()\":{\"details\":\"get all payment types \"},\"getPaymentMethodsAndCategories()\":{\"details\":\"Fetch payment types and categories in a single query\"},\"getPaymentMethodsCategories()\":{\"details\":\"get all payment types categories \",\"returns\":{\"_0\":\"(PaymentMethodsStructs.CategoryItem[] memory) CategoryNames Array with category id as array index\"}},\"getTotalPaymentMethods()\":{\"details\":\"getTotalPaymentMethods\"},\"getTotalPaymentMethodsCategories()\":{\"details\":\"getTotalPaymentMethods\"},\"isAssetSupported(address)\":{\"details\":\"is the provided asset contract supported\",\"params\":{\"_contractAddress\":\"asset contract address\"}},\"isValidAssetItem(uint256)\":{\"params\":{\"_id\":\"asset id\"}},\"removePaymentMethod(uint256)\":{\"details\":\"remove  a payment method \",\"params\":{\"_id\":\"the payment method id\"}},\"removePaymentMethodCategory(uint256)\":{\"details\":\"delete a cetegory\",\"params\":{\"_id\":\"category  id\"}},\"setAssetPriceFeedContract(string,address)\":{\"details\":\"set priceFeed contract\",\"params\":{\"_asset\":\"the asset  to fetch price feed\",\"_contract\":\"feed contract\"}},\"setConfigData(string,bytes32)\":{\"params\":{\"_key\":\"config key\",\"_value\":\"cofig data\"}},\"setPermissionManager(address)\":{\"details\":\"set permission manager contract\"},\"statusMsg(string)\":{\"details\":\"status msg\",\"params\":{\"_text\":\"status text  \"}},\"statusMsg(string,bytes32)\":{\"details\":\"status msg\",\"params\":{\"_params\":\"he parameters \",\"_text\":\"status text  \"}},\"statusMsg(string,string)\":{\"details\":\"status msg\",\"params\":{\"_params\":\"he parameters \",\"_text\":\"status text  \"}},\"updateAsset(uint256,address,bool,address,string,string,string,address,bool)\":{\"details\":\"add a new asset to supported list\",\"params\":{\"contractAddress\":\"asset's contract address\",\"id\":\"asset Id\",\"isEnabled\":\"if contract is enabled\",\"isPegged\":\"a  boolean describing wether its pegged  or not\",\"originalName\":\"if pegged, then original asset name\",\"originalSymbol\":\"if pegged, the original symbol\",\"peggedAssetGateway\":\"the pegged asset gateway\"}},\"updatePaymentMethod((uint256,string,uint256,uint256,uint256,string[],string[],bool),uint256)\":{\"details\":\"update  payment type info\",\"params\":{\"_dataToSave\":\"payment method data\",\"categoryId\":\"the new category id of the payment type\"}},\"updatePaymentMethodCategory(uint256,string,bool)\":{\"details\":\"add a new payment type category\",\"params\":{\"categoryId\":\"the category id\",\"isEnabled\":\"if the category is enabled or not\",\"newCategoryName\":\"new category name to change\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"STORAGE_CONTRACT()\":{\"notice\":\"Store address\"},\"getAllConfigs()\":{\"notice\":\"get all config data\"},\"getConfig(string)\":{\"notice\":\"get config\"},\"getPriceFeedContract(string)\":{\"notice\":\"getAggregatorV3Interface\"},\"grantRole(string,address)\":{\"notice\":\"grant role\"},\"hasRole(string,address)\":{\"notice\":\"hasRole\"},\"isValidAssetItem(uint256)\":{\"notice\":\"isValidAsset using id\"},\"setConfigData(string,bytes32)\":{\"notice\":\"setConfig\"},\"setStorage(address)\":{\"notice\":\"setStorage\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x78af5c13ec137bdbb22ec9d65c730fb6f138d3a61a3fdbb63be4838ce7faf2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Assets.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n//import \\\"./PermissionManager/PM.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n//import \\\"./Storage/StoreProxy.sol\\\";\\nimport \\\"./Commons/AssetsStructs.sol\\\";\\nimport \\\"./Base.sol\\\";\\nimport \\\"./PriceFeeds/PriceFeed.sol\\\";\\n\\ncontract Assets is Base {\\n\\n    //events \\n    event AddAsset(uint256 id);\\n    event UpdateAsset(uint256 id);\\n\\n    //store Proxy\\n    ////IStorage getDataStore() = StoreProxy(address(this)).getIStorage();\\n\\n    //initiate price feed\\n    PriceFeed _priceFeed = PriceFeed(address(this));\\n\\n     /**\\n     * @dev add a new asset to supported list\\n     * @param  contractAddress asset's contract address\\n     * @param  isPegged a  boolean describing wether its pegged  or not\\n     * @param  peggedAssetGateway gateway for interacting with the asset\\n     * @param  originalName if pegged, then original asset name\\n     * @param  originalSymbol if pegged, the original symbol\\n     * @param isEnabled if contract is enabled\\n     */\\n    function addAsset(\\n        address           contractAddress, \\n        bool              isPegged,\\n        address           peggedAssetGateway,\\n        string   memory   originalName,\\n        string   memory   originalSymbol,\\n        string   memory   priceFeedProvider,\\n        address           priceFeedContract,\\n        bool              isEnabled\\n    ) public onlyAdmin returns(uint256) {\\n        \\n        //fetch contract  info\\n        ERC20 erc20Token = ERC20(contractAddress);\\n\\n        uint256 id = getDataStore().getNextAssetId();\\n\\n        AssetsStructs.AssetItem memory assetItem = AssetsStructs.AssetItem(\\n            id,\\n            contractAddress,\\n            erc20Token.decimals(),\\n            isPegged,\\n            peggedAssetGateway,\\n            originalName,\\n            originalSymbol,\\n            priceFeedProvider,\\n            priceFeedContract,\\n            isEnabled,\\n            block.timestamp,\\n            block.timestamp\\n        );\\n\\n        processAndSaveAsset(assetItem, erc20Token.symbol());\\n\\n        emit AddAsset(id);\\n\\n        return id;\\n    }//end fun\\n\\n\\n    /**\\n     * @dev add a new asset to supported list\\n     * @param id asset Id\\n     * @param contractAddress asset's contract address\\n     * @param isPegged a  boolean describing wether its pegged  or not\\n     * @param peggedAssetGateway the pegged asset gateway\\n     * @param originalName if pegged, then original asset name\\n     * @param originalSymbol if pegged, the original symbol\\n     * @param isEnabled if contract is enabled\\n     */\\n    function updateAsset(\\n        uint256             id,\\n        address             contractAddress, \\n        bool                isPegged,\\n        address             peggedAssetGateway,\\n        string    memory    originalName,\\n        string    memory    originalSymbol,\\n        string    memory    priceFeedProvider,\\n        address             priceFeedContract,\\n        bool                isEnabled\\n    )  public onlyAdmin returns(uint256) {\\n\\n\\n        //lets get the assetInfo\\n        AssetsStructs.AssetItem memory assetInfo = getAssetById(id);\\n\\n        require(assetInfo.contractAddress != address(0), statusMsg(\\\"UNKNOWN_ASSET\\\"));\\n\\n        //fetch contract  info\\n        ERC20 erc20Token = ERC20(contractAddress);\\n\\n        AssetsStructs.AssetItem memory newAssetItem = AssetsStructs.AssetItem(\\n            id,\\n            contractAddress,\\n            erc20Token.decimals(),\\n            isPegged,\\n            peggedAssetGateway,\\n            originalName,\\n            originalSymbol,\\n            priceFeedProvider,\\n            priceFeedContract,\\n            isEnabled,\\n            assetInfo.createdAt,\\n            block.timestamp\\n        );\\n\\n\\n        processAndSaveAsset(newAssetItem, erc20Token.symbol());\\n      \\n        emit UpdateAsset(id);\\n\\n        return id;\\n    }//end \\n\\n\\n    /**\\n     * @dev process and save asset\\n     */\\n    function processAndSaveAsset(\\n        AssetsStructs.AssetItem memory assetItem,\\n        string memory assetSymbol \\n    ) private onlyAdmin  {\\n\\n        uint256 totalAssets = getDataStore().getTotalAssets();\\n\\n        require(assetItem.id > 0 && assetItem.id <= totalAssets, statusMsg(\\\"INVALID_ASSET_ID\\\"));\\n\\n        require(assetItem.contractAddress != address(0), statusMsg(\\\"INAVLID_CONTRACT_ADDRESS\\\"));\\n\\n        require(assetItem.priceFeedContract != address(0), statusMsg(\\\"INAVLID_PRICE_FEED_CONTRACT_ADDRESS\\\"));\\n\\n        require(assetItem.contractAddress != address(0), statusMsg(\\\"INVALID_ASSET_CONTRACT_ADDRESS\\\"));\\n\\n        _priceFeed.setAssetPriceFeedContract(assetSymbol, assetItem.priceFeedContract);\\n        \\n        // lets save the data\\n        getDataStore().saveAssetData(assetItem.id, assetItem);\\n\\n    }//end\\n   \\n    /**\\n     * @dev fetch asset by it contract address\\n     * @param _contractAddress asset's contract address\\n     * @return AssetsStructs.AssetItem\\n     */\\n    function getAsset(address _contractAddress) public  view returns (AssetsStructs.AssetItem memory) {\\n        \\n        //first lets get the index\\n        uint256 assetId = getDataStore().getAssetIdByAddress(_contractAddress);\\n\\n\\n        //this lets check if id isnt 0\\n        require(assetId > 0, \\\"XPIE:UNKNOWN_ASSET\\\");\\n\\n\\n        //lets get asset info by id\\n        AssetsStructs.AssetItem memory assetData = getAssetById(assetId);\\n\\n        //is asset enabled, if not disabled \\n        require(assetData.isEnabled == true,\\\"XPIE:ASSET_NOT_ENABLED\\\");\\n        \\n        return assetData;\\n    } //end \\n\\n\\n    /**\\n     * @dev getAssetById\\n     * @param _id asset id\\n     */\\n    function getAssetById(uint256 _id) public view returns (AssetsStructs.AssetItem memory) {\\n        return getDataStore().getAssetData(_id);\\n    }\\n\\n\\n    /**\\n     * @dev check if the asset is valid or enabled \\n     */\\n    function isValidAssetItem(AssetsStructs.AssetItem memory assetItem) pure internal  returns(bool){\\n        return (\\n            assetItem.contractAddress != address(0) && \\n            assetItem.isEnabled == true\\n        );\\n    }\\n\\n    /**\\n     * isValidAsset using id\\n     * @param _id asset id\\n     */\\n    function isValidAssetItem(uint256 _id) public view returns(bool) {\\n        return isValidAssetItem(getAssetById(_id));\\n    }\\n\\n\\n    /**\\n     * @dev is the provided asset contract supported\\n     *  @param _contractAddress  asset contract address\\n     */\\n     function isAssetSupported(address _contractAddress) public  view returns(bool) {\\n         return isValidAssetItem(getAsset(_contractAddress));\\n     }\\n\\n\\n    /**\\n     * @dev get all assets \\n     */\\n     function getAllAssets() public view returns(AssetsStructs.AssetItem[] memory){\\n\\n        uint256 totalAssets = getDataStore().getTotalAssets();\\n\\n        AssetsStructs.AssetItem[] memory assetsData  = new AssetsStructs.AssetItem[]  (totalAssets + 1);\\n\\n         //loop to get items\\n         // ids never starts  with  0, so start with  1\\n        for(uint256 i = 1; i <= totalAssets; i++){\\n\\n             //lets now get asset  info \\n            AssetsStructs.AssetItem memory assetItem = getAssetById(i);\\n\\n            if(isValidAssetItem(assetItem)){\\n                assetsData[i] = assetItem;\\n            }\\n        }\\n\\n        return assetsData;\\n     } //end fun\\n\\n\\n} //end contract\",\"keccak256\":\"0xed2064a6c488201346cc21267fab620fb69ba57ce3c7686267192aa07fe8853a\",\"license\":\"MIT\"},\"contracts/Base.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Config.sol\\\";\\n\\ncontract Base is  Config {}\",\"keccak256\":\"0x4cf5e03a1022ecbdf16a4ac7e7375d09c483c22b1754a5e7372aba2af901272c\",\"license\":\"MIT\"},\"contracts/Commons/AssetsStructs.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev assets struct Implementation\\n */\\ncontract AssetsStructs {\\n    \\n    /**\\n     * @dev asset struct item\\n     */\\n    struct AssetItem {\\n        uint256   id;\\n        address   contractAddress;\\n        uint8     decimals;\\n        bool      isPegged;\\n        address   peggedAssetGateway;\\n        string    originalName;\\n        string    originalSymbol;\\n        string    priceFeedProvider;\\n        address   priceFeedContract;\\n        bool      isEnabled;\\n        uint256   createdAt;\\n        uint256   updatedAt;\\n    }\\n\\n}\",\"keccak256\":\"0x4bde84b17a7cec0d2ae804539665fb30e1cf64951f6bce3fb97b02d255c1df9b\",\"license\":\"MIT\"},\"contracts/Commons/ConfigsStructs.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev offer struct Implementation\\n */\\ncontract ConfigsStructs {\\n\\n    struct ConfigItem {\\n        string _key;\\n        bytes32 _value;\\n    }\\n}\",\"keccak256\":\"0x0d676abeb34518d739415e91a881acc4072f94a5d32cec9d2a7d7530fc16651a\",\"license\":\"MIT\"},\"contracts/Commons/OffersStructs.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev offer struct Implementation\\n */\\ncontract OffersStructs {\\n    \\n    struct OfferInfo {\\n        address asset;\\n        bytes32 offerType;\\n        bytes32 countryCode;\\n        bytes32 currencyCode;\\n        uint256  paymentMethod;\\n        string  externalInfoHash;\\n        int     externalStoreId;\\n        bool    isEnabled;\\n        uint256 expiry;\\n    }\\n\\n    struct PricingInfo {\\n        bytes32   pricingMode;\\n        uint256   profitMargin;\\n        uint256   fixedPrice;\\n    }\\n\\n    struct TradeInfo {\\n        uint256  minTradeAmountLimit;\\n        uint256  maxTradeAmountLimit;\\n        bool     hasSecurityDeposit;\\n        uint256  securityDepositRate;\\n        uint256  paymentWindow;\\n        uint256  partnerMinimumTrades;\\n        uint256  partnerMinimumReputation;\\n    }\\n    \\n    struct OfferItem {\\n        uint256      id;\\n        address      owner;\\n        OfferInfo    offerInfo;\\n        PricingInfo  pricingInfo;\\n        TradeInfo    tradeInfo;\\n    }  \\n\\n\\n\\n    //offer index Item\\n    //struct OfferIndexesItem {\\n    //   mapping(bytes32 => uint256[]) ids;\\n    //} \\n\\n}\",\"keccak256\":\"0x4b1ecf4a726256688ea70507fb0d7813647b8264c2e14bf6b3a31d0b2a7746cb\",\"license\":\"MIT\"},\"contracts/Commons/PaymentMethodsStructs.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev payment method struct Implementation\\n */\\ncontract PaymentMethodsStructs {\\n    \\n\\n   struct PaymentMethodItem {\\n      uint256 id; \\n      string  name;\\n      uint256 categoryId;\\n      uint256 minPaymentWindow;\\n      uint256 maxPaymentWindow;\\n      string[] countries;\\n      string[] continents;\\n      bool isEnabled;\\n   }\\n\\n\\n   /**\\n    * category Struct\\n    */\\n    struct CategoryItem {\\n        uint256 id; \\n        string name;\\n        bool isEnabled;\\n    }\\n    \\n}\",\"keccak256\":\"0xa6fed139265365ac3a339c8fb50b5de64d43ddb65d938b157693e32b4d7e03f2\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PermissionManager/PM.sol\\\";\\nimport \\\"./Commons/ConfigsStructs.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n//import \\\"./Storage/Interfaces/IStorage.sol\\\";\\nimport \\\"./Storage/DataStore.sol\\\";\\n\\ncontract Config is PM, Utils, DataStore {\\n\\n    /**\\n     * get config\\n     * @param _key config key \\n     */ \\n    function getConfig(string memory _key) public view returns(bytes32) {\\n        return getDataStore().getConfigData(_key);\\n    }\\n\\n    \\n    /**\\n     * setConfig\\n     * @param _key config key\\n     * @param _value cofig data\\n     */\\n    function setConfigData(string memory _key, bytes32 _value) public onlyAdmin {\\n        getDataStore().addConfigData(_key, _value);\\n    }\\n\\n\\n    /**\\n     * get all config data\\n     */\\n    function getAllConfigs() public view returns (ConfigsStructs.ConfigItem[] memory){\\n       return  getDataStore().getAllConfigData();\\n    }\\n\\n}\",\"keccak256\":\"0x6ad9a3cb85e2113d68a175a98f10458360d651cfaffae1e463dfc257fb8473ee\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PriceFeeds/PriceFeed.sol\\\";\\nimport \\\"./Assets.sol\\\";\\n//mport \\\"./PermissionManager/PM.sol\\\";\\n\\nimport \\\"./PaymentMethods.sol\\\";\\n\\n//import \\\"./Config.sol\\\";\\n\\n//import \\\"./Storage/DataStore.sol\\\";\\n\\n\\ncontract Factory is  PaymentMethods, PriceFeed, Assets {\\n    \\n    constructor(\\n        address _permissionManagerContract,\\n        address _storageContract\\n    ) {\\n\\n        //lets initialize pm \\n        initializePermissionManager(_permissionManagerContract);\\n\\n        //initialize data store \\n        initializeDataStore(_storageContract);\\n\\n    } //end fun \\n\\n\\n} //end contract\",\"keccak256\":\"0x8ea4e599f95a58fa97158e2abc3482d24b84faec40ecd2c670b3f0be078eb544\",\"license\":\"MIT\"},\"contracts/PaymentMethods.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n//import \\\"./PermissionManager/PM.sol\\\";\\n\\n//import \\\"./Storage/StoreProxy.sol\\\";\\nimport \\\"./Commons/PaymentMethodsStructs.sol\\\";\\nimport \\\"./Base.sol\\\";\\n\\ncontract PaymentMethods is Base {\\n\\n    event AddPaymentMethodCategory(uint256 _id);\\n    event RemovePaymentMethodCategory(uint256 _id);\\n    event UpdatePaymentMethodCategory(uint256 categoryId);\\n    event AddPaymentMethod(uint256 _id);\\n    event UpdatePaymentMethod(uint256 _id);\\n    event RemovePaymentMethod(uint256 _id);\\n\\n        /**\\n     * @dev getTotalPaymentMethods\\n     */\\n     function getTotalPaymentMethods() public view returns(uint256) {\\n         return getDataStore().getTotalPaymentMethods();\\n     } //end fun \\n\\n    /**\\n     * @dev getTotalPaymentMethods\\n     */\\n     function getTotalPaymentMethodsCategories() public view returns(uint256) {\\n         return getDataStore().getTotalPaymentMethodsCategories();\\n     } //end fun \\n\\n\\n    /**\\n    * @dev add a new payment type category\\n    * @param name category name in string\\n    * @return uint256 new category  id\\n   */\\n   function addPaymentMethodCategory(\\n       string   memory name,\\n       bool isEnabled\\n    ) external  onlyAdmin() returns(uint256) {\\n     \\n        uint256 catId = getDataStore().getNextPaymentMethodCategoryId();\\n\\n        PaymentMethodsStructs.CategoryItem memory _dataToSave = PaymentMethodsStructs.CategoryItem(\\n            catId,\\n            name,\\n            isEnabled\\n        );\\n\\n        getDataStore().savePaymentMethodsCategoryData(\\n            catId,\\n            _dataToSave\\n        );\\n\\n        emit AddPaymentMethodCategory(catId);\\n\\n        return catId;\\n    } //end fun \\n\\n\\n    /**\\n    * @dev delete a cetegory\\n    * @param _id category  id\\n    */\\n    function removePaymentMethodCategory(uint256 _id) external onlyAdmin() {\\n        getDataStore().deletePaymentMethodsCategoryData(_id);\\n        emit RemovePaymentMethodCategory(_id);\\n    } //end fun \\n\\n\\n    /**\\n    * @dev add a new payment type category\\n    * @param categoryId the category id\\n    * @param newCategoryName  new category name to change\\n    * @param isEnabled if the category is enabled or not\\n    */\\n    function updatePaymentMethodCategory(\\n        uint256 categoryId,  \\n        string memory newCategoryName,\\n        bool isEnabled\\n    ) external  onlyAdmin() {\\n      \\n       PaymentMethodsStructs.CategoryItem memory _dataToSave = PaymentMethodsStructs.CategoryItem(\\n            categoryId,\\n            newCategoryName,\\n            isEnabled\\n        );\\n\\n        getDataStore().savePaymentMethodsCategoryData(\\n            categoryId,\\n            _dataToSave\\n        );\\n\\n        emit UpdatePaymentMethodCategory(categoryId);\\n    } //end fun \\n\\n\\n    /**\\n    * @dev add a new payment method\\n    * @param name payment method name\\n    * @param categoryId category id for the new payment  type\\n    * @param countries supported countries\\n    * @param continents Supported continents\\n    * @param isEnabled is this payment method enabled\\n    * @return uint256\\n   */\\n   function addPaymentMethod(\\n       string memory name, \\n       uint256 categoryId,\\n       uint256 minPaymentWindow,\\n       uint256 maxPaymentWindow,\\n       string[] memory countries,\\n       string[] memory continents,\\n       bool isEnabled \\n    ) public  onlyAdmin() returns(uint256) {\\n\\n        //lets  check if categoryId exists \\n        require(categoryId > 0 && categoryId <= getTotalPaymentMethodsCategories(),statusMsg(\\\"UNKNOWN_CATEGORY\\\",toBytes32(categoryId)));\\n        require(bytes(name).length > 0, statusMsg(\\\"PAYMENT_METHOD_NAME_REQUIRED\\\"));\\n\\n        //avoid totalPaymentTypes++\\n        //counting starts from 1, so index 0 wont exist\\n        uint256 id = getDataStore().getNextPaymentMethodId();\\n\\n        PaymentMethodsStructs.PaymentMethodItem memory _dataToSave = PaymentMethodsStructs.PaymentMethodItem(\\n            id, \\n            name, \\n            categoryId,\\n            minPaymentWindow,\\n            maxPaymentWindow,\\n            countries,\\n            continents,\\n            isEnabled\\n        );\\n\\n        getDataStore().savePaymentMethodData(\\n            id,\\n            _dataToSave\\n        );\\n\\n        emit AddPaymentMethod(id);\\n\\n        return id;\\n   } //end \\n\\n\\n    /**\\n    * @dev getPaymentMethod\\n    * @param _id paymentMethod id\\n    */\\n    function getPaymentMethod(uint256 _id) public view returns (PaymentMethodsStructs.PaymentMethodItem memory) {\\n        return getDataStore().getPaymentMethodData(_id);\\n    }\\n\\n   /**\\n   * @dev remove  a payment method \\n   * @param _id  the payment method id\\n   */\\n   function removePaymentMethod(uint256 _id) external  onlyAdmin() { \\n      getDataStore().deletePaymentMethodData(_id); \\n      emit RemovePaymentMethod(_id);\\n   }\\n\\n\\n   /**\\n   *  @dev update  payment type info\\n   *  @param _dataToSave payment method data\\n   *  @param  categoryId the new category id of the payment type\\n   */\\n   function updatePaymentMethod(\\n       PaymentMethodsStructs.PaymentMethodItem memory _dataToSave,\\n       uint256 categoryId\\n    ) external  onlyAdmin()  {\\n        \\n        //lets check if \\n        require(_dataToSave.id > 0 && _dataToSave.id  <= getTotalPaymentMethods(),statusMsg(\\\"UNKNOWN_PAYMENT_METHOD\\\",toBytes32(_dataToSave.id)));\\n\\n         require(categoryId > 0 && categoryId <= getTotalPaymentMethodsCategories(),statusMsg(\\\"UNKNOWN_CATEGORY\\\",toBytes32(categoryId)));\\n\\n\\n        getDataStore().savePaymentMethodData(\\n            _dataToSave.id,\\n            _dataToSave\\n        );\\n\\n        emit UpdatePaymentMethod(_dataToSave.id);\\n   } //end fun\\n\\n   /**\\n   *  @dev get all payment types categories \\n   *  @return  (PaymentMethodsStructs.CategoryItem[] memory) CategoryNames Array with category id as array index\\n   */\\n   function  getPaymentMethodsCategories() public view returns (PaymentMethodsStructs.CategoryItem[] memory) {\\n    \\n      uint256 totalCategories = getTotalPaymentMethodsCategories(); \\n      PaymentMethodsStructs.CategoryItem[] memory  categoriesArray = new PaymentMethodsStructs.CategoryItem[] (totalCategories + 1);\\n      \\n      //mapping index starts with 1, not  0\\n      for(uint256 i = 1; i <= totalCategories; i++ ){\\n        categoriesArray[i] = getDataStore().getPaymentMethodsCategoryData(i);\\n      }\\n\\n      return categoriesArray;\\n   } //end fun \\n\\n   \\n    /* \\n   * @dev get payment types using it category id\\n   * @param categoryId uint256 category id \\n   * @return PaymentMethodsStructs.PaymentMethodItem[] memory\\n   */\\n   function getPaymentMethodsByCategory(uint256 categoryId) external view returns( PaymentMethodsStructs.PaymentMethodItem[] memory ) {\\n\\n      uint256 totalPaymentMethods = getTotalPaymentMethods();\\n\\n      //lets fetch the  payment types ids\\n      PaymentMethodsStructs.PaymentMethodItem[] memory paymentMethodsArray   = new PaymentMethodsStructs.PaymentMethodItem[] (totalPaymentMethods + 1);\\n\\n        for(uint256  i = 1; i <= totalPaymentMethods; i++){\\n\\n            PaymentMethodsStructs.PaymentMethodItem memory paymentMethodData =  getPaymentMethod(i);\\n\\n            if(paymentMethodData.categoryId == categoryId && bytes(paymentMethodData.name).length > 0){\\n                paymentMethodsArray[i] = paymentMethodData;\\n            }\\n        }\\n\\n        return paymentMethodsArray;\\n   }  //end fun\\n\\n\\n   /**\\n   * @dev get all payment types \\n   */\\n   function getPaymentMethods() public view returns( PaymentMethodsStructs.PaymentMethodItem[] memory ) {\\n\\n      uint256 totalPaymentMethods = getTotalPaymentMethods();\\n\\n\\n      PaymentMethodsStructs.PaymentMethodItem[] memory paymentMethodsArray   = new PaymentMethodsStructs.PaymentMethodItem[] (totalPaymentMethods + 1);\\n\\n      for(uint256 i = 1; i <= totalPaymentMethods; i++ ){\\n         paymentMethodsArray[i] = getPaymentMethod(i);\\n      }\\n\\n      return paymentMethodsArray;\\n   }\\n\\n\\n    /**\\n    * @dev Fetch payment types and categories in a single query\\n    */\\n   function getPaymentMethodsAndCategories() \\n        external \\n        view \\n        returns (PaymentMethodsStructs.CategoryItem[] memory,  PaymentMethodsStructs.PaymentMethodItem[] memory) \\n    {\\n      return (getPaymentMethodsCategories(),getPaymentMethods());\\n   }//end \\n    \\n}//end contract\",\"keccak256\":\"0xe7a8a6f642350839a43f12d0a6e9b9581b52f1dd96aee66798de32f60437c94b\",\"license\":\"MIT\"},\"contracts/PermissionManager/PM.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\n\\n\\ninterface IPermissionManager {\\n    function isSuperAdmin(address _address) external view  returns(bool);\\n    function isAdmin(address _address) external view  returns(bool);\\n    function isModerator(address _address) external view returns(bool);\\n    function isStorageEditor(address _address) external view  returns(bool);\\n    function hasRole(string memory roleName, address _address) external view returns (bool);\\n    function grantRole(string memory roleName, address _address) external;\\n}\\n\\ncontract PM {\\n\\n    event SetPermissionManager(address indexed _contract);\\n\\n    IPermissionManager public PERMISSION_MANAGER;\\n\\n    bool pmInitialized;\\n    \\n    address _owner;\\n\\n    constructor() {\\n      _owner = msg.sender;\\n    }\\n\\n    /**\\n     * initializePM\\n     */\\n    function initializePermissionManager(address _permissionManager) internal {\\n      \\n      require(!pmInitialized, \\\"PERMISSION_MANAGER_ALREADY_INITIALIZED\\\");\\n\\n      require(_owner == msg.sender, \\\"ONLY_CONTRACT_OWNER_CAN_INITIALIZE\\\");\\n      \\n      PERMISSION_MANAGER = IPermissionManager(_permissionManager);\\n\\n      //lets add contract as permitted to write on storage \\n      //PERMISSION_MANAGER.grantRole(\\\"STORAGE_EDITOR\\\", address(this));\\n\\n      emit SetPermissionManager(_permissionManager);\\n\\n      pmInitialized = true;\\n    }\\n\\n   \\n    /**\\n     * @dev  set permission manager contract\\n     */\\n    function setPermissionManager(address _newAddress) external onlySuperAdmin () {\\n      \\n      PERMISSION_MANAGER = IPermissionManager(_newAddress);\\n\\n      emit SetPermissionManager(_newAddress);\\n    }\\n\\n    /**\\n    * @dev superAdminOnly - a modifier which allows only super admin \\n    */\\n    modifier onlySuperAdmin () {\\n      require(PERMISSION_MANAGER.isSuperAdmin(msg.sender), \\\"ONLY_SUPER_ADMINS_ALLOWED\\\" );\\n      _;\\n    }\\n\\n    /**\\n    * OnlyAdmin \\n    * This also allows super admins\\n    */\\n    modifier onlyAdmin () {\\n      require(PERMISSION_MANAGER.isAdmin(msg.sender), \\\"ONLY_ADMINS_ALLOWED\\\");\\n      _;\\n    }\\n\\n    /**\\n    * OnlyModerator\\n    */\\n    modifier onlyModerator() {\\n      require(PERMISSION_MANAGER.isModerator(msg.sender), \\\"MODERATORS_ONLY_ALLOWED\\\" );\\n      _;\\n    }\\n\\n   \\n    /**\\n     * hasRole\\n     */\\n    function hasRole(string memory roleName, address _address) public view returns(bool){\\n      return PERMISSION_MANAGER.hasRole(roleName,_address);\\n    }\\n\\n\\n    /**\\n     * grant role\\n     */\\n    function grantRole(string memory roleName, address _address) public onlySuperAdmin {\\n      PERMISSION_MANAGER.grantRole(roleName, _address);\\n    }\\n\\n} //end function\",\"keccak256\":\"0x506d13cca5854ed9f174cefa27927503d4a74e4128789e3cd133e393928666d6\",\"license\":\"MIT\"},\"contracts/PriceFeeds/Oracles/ChainLink.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"../../Base.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\n\\ncontract ChainLink is IPriceFeed, Base {\\n\\n    string public providerName = \\\"ChainLink\\\";\\n\\n\\n    //lets create storage for the contracts \\n    //assetPair => contractAddress\\n    mapping(string  => address) private feedsContracts;\\n    \\n    /**\\n     * @dev set priceFeed contract\\n     * @param _asset the asset  to fetch price feed\\n     * @param _contract feed contract\\n     */\\n    function _setPriceFeedContract(string memory _asset, address _contract) private {\\n        setAssetPriceFeedContract(_asset, _contract);\\n    }\\n\\n    /**\\n     * @dev set priceFeed contract\\n     * @param _asset the asset  to fetch price feed\\n     * @param _contract feed contract\\n     */\\n    function setAssetPriceFeedContract(string memory _asset, address _contract) public override onlyAdmin {\\n        //lets get chain id \\n        feedsContracts[_asset] = _contract;\\n    } //end fun \\n\\n    /**\\n     * getAggregatorV3Interface\\n     */\\n    function getPriceFeedContract(string memory _asset) public view returns(address) {\\n        \\n        //lets get chainId \\n        address _contract = feedsContracts[_asset];\\n\\n        require(_contract != address(0), statusMsg(\\\"CHAIN_FEED_CONTRACT_MISSING\\\",_asset));\\n\\n        return _contract;\\n    }\\n\\n    /**\\n     * @dev get latest price\\n     * @param _asset the asset which we need latest price for\\n     */\\n    function getLatestPrice(string memory _asset) public override  view returns(uint256) {\\n        \\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(getPriceFeedContract(_asset));\\n\\n         (\\n            uint80 roundID, \\n            int price,\\n            uint startedAt,\\n            uint timeStamp,\\n            uint80 answeredInRound\\n        ) = priceFeed.latestRoundData();\\n\\n        return uint256(price);\\n    } //end get price\\n\\n}//end contract\",\"keccak256\":\"0x5374ba5ca7104bfa23c11e55104fac5aac0228328798dbd0311a82452b995cf8\",\"license\":\"MIT\"},\"contracts/PriceFeeds/Oracles/IPriceFeed.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPriceFeed {\\n    //string public providerName;\\n    function getLatestPrice(string memory _asset) external view returns(uint256);\\n    function setAssetPriceFeedContract(string memory _asset, address _contract) external;\\n}\",\"keccak256\":\"0xa7bbc7b6317e5ccc8aa8c443b5d4bd7703cee5bd257a1c23f337b2168fe73682\",\"license\":\"MIT\"},\"contracts/PriceFeeds/Oracles/OpenPriceFeed.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"../../Base.sol\\\";\\n\\ninterface UniswapAnchoredView {\\n    function price(string calldata symbol) external view returns (uint);\\n}\\n\\ncontract OpenPriceFeed is Base, IPriceFeed {\\n\\n    string public providerName = \\\"Open Price Feed\\\";\\n\\n     //if the uniswap anchor contract is changed\\n    event uniswapAnchorContractChanged(address indexed _newAddress);\\n\\n    //uniswap anchored view contract\\n    UniswapAnchoredView public  UNISWAP_ANCHORED_VIEW;\\n\\n    /**\\n     * @dev initiate open price feed\\n     */\\n    function _initialize() private {\\n        \\n        uint256  chainId = getChainID();\\n\\n        address feedContractAddress;\\n        \\n\\n        //mainnet , default mainnet's address is  hardcoded in OpenPriceFeed.sol\\n        if(chainId  == 1){ feedContractAddress = 0x922018674c12a7F0D394ebEEf9B58F186CdE13c1;  } // if ethereum mainnet\\n        else if(chainId == 3){ feedContractAddress = 0xBEf4E076A995c784be6094a432b9CA99b7431A3f; }  // if ropsten\\n        else if(chainId == 42){  feedContractAddress = 0xbBdE93962Ca9fe39537eeA7380550ca6845F8db7; } //if kovan\\n        else {\\n            //revert(\\\"OpenPriceFeed: Unknown cahinId, kindly use  ropsten, kovan or mainnet\\\");\\n        }\\n\\n        _setUniswapAnchorContract(feedContractAddress);\\n    }\\n\\n\\n    constructor() {\\n        _initialize();\\n    }\\n\\n    /**\\n     * @dev update uniswap anchor contract\\n     * @param _newAddress  the new contract address\\n     */\\n    function _setUniswapAnchorContract(address _newAddress) private  {\\n        \\n        UNISWAP_ANCHORED_VIEW = UniswapAnchoredView(_newAddress);\\n\\n        //emit event\\n        emit uniswapAnchorContractChanged(_newAddress);\\n\\n    } //end  fun\\n\\n\\n    /**\\n     * @dev update uniswap anchor contract\\n     * @param _newAddress  the new contract address\\n     */\\n    function setUniswapAnchorContract(address _newAddress) external onlyAdmin ()  {\\n        _setUniswapAnchorContract(_newAddress);\\n    }\\n\\n    /**\\n     * getLatestPrice\\n     */\\n    function getLatestPrice(string memory _symbol) public override view returns (uint256) {\\n        return UNISWAP_ANCHORED_VIEW.price(_symbol);\\n    } //end fun\\n\\n\\n    /**\\n     * @dev set priceFeed contract\\n     * @param _asset the asset  to fetch price feed\\n     * @param _contract feed contract\\n     */\\n    function setAssetPriceFeedContract(string memory _asset, address _contract) public override onlyAdmin {}\\n\\n}//end \",\"keccak256\":\"0xecb998709c9b0bfac49856f74d77b064d5b06e4b002acc697d36fd8ae9505fb5\",\"license\":\"MIT\"},\"contracts/PriceFeeds/PriceFeed.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Oracles/IPriceFeed.sol\\\";\\nimport \\\"./Oracles/ChainLink.sol\\\";\\nimport \\\"./Oracles/OpenPriceFeed.sol\\\";\\nimport \\\"../Base.sol\\\";\\n\\ncontract PriceFeed is Base, ChainLink {\\n\\n   /*\\n   event SetAssetPriceFeedContract( string indexed _assset, address indexed _contract);\\n\\n   IPriceFeed ACTIVE_PRICE_FEED_PROVIDER;\\n   \\n   string ACTIVE_PRICE_FEED_PROVIDER_NAME;\\n\\n   mapping(string => address) public priceFeedOracles;\\n\\n\\n   constructor() {\\n\\n      address chainLinkAddress = address(new ChainLink());\\n\\n      //create the price feed oracles\\n      priceFeedOracles[\\\"chainlink\\\"] = chainLinkAddress;\\n      priceFeedOracles[\\\"open_price_feed\\\"] = address(new OpenPriceFeed());\\n\\n      //set active contract \\n      ACTIVE_PRICE_FEED_PROVIDER = IPriceFeed(chainLinkAddress);\\n      ACTIVE_PRICE_FEED_PROVIDER_NAME = \\\"chainlink\\\";\\n   }\\n\\n\\n   /**\\n    * @dev chang provider\\n    * @param _provider (example chainlink)\\n    *\\n    function priceFeedSetActiveProvider(string memory _provider)  public onlyAdmin {\\n\\n      require(toBytes32(_provider) == toBytes32(\\\"chainlink\\\") || \\n              toBytes32(_provider) == toBytes32(\\\"open_price_feed\\\"),\\n              statusMsg(\\\"UNKNOWN_PROVIDER\\\",_provider)\\n      );\\n\\n      address _providerContractAddr = priceFeedOracles[_provider];\\n\\n      require(_providerContractAddr != address(0),statusMsg(\\\"PROVIDER_CONTRACT_ADDRESS_INVALID\\\"));\\n\\n      ACTIVE_PRICE_FEED_PROVIDER = IPriceFeed(_providerContractAddr);\\n\\n      ACTIVE_PRICE_FEED_PROVIDER_NAME = _provider;\\n    } //end fun \\n\\n\\n   /**\\n    * @dev get latest price\\n    * @param _asset asset symbol\\n    *\\n   function getLatestPrice(string memory _asset) public view returns (uint256) {\\n      return ACTIVE_PRICE_FEED_PROVIDER.getLatestPrice(_asset);\\n   } //end fun \\n\\n\\n   /**\\n    * get latestPrice by provider\\n    * @param  _provider provider name eg. chainlink\\n    * @param _asset  asset symbol eg. eth\\n    *\\n    function getLatestPriceByProvider(string memory _provider,string memory _asset) public view returns (uint256) {\\n      \\n      require(toBytes32(_provider) == toBytes32(\\\"chainlink\\\") || \\n         toBytes32(_provider) == toBytes32(\\\"open_price_feed\\\"),\\n         statusMsg(\\\"UNKNOWN_PROVIDER\\\",_provider)\\n      );\\n\\n      address _providerContractAddr = priceFeedOracles[_provider];\\n\\n      require(_providerContractAddr != address(0),statusMsg(\\\"PROVIDER_CONTRACT_ADDRESS_INVALID\\\"));\\n\\n      IPriceFeed _providerContract = IPriceFeed(_providerContractAddr);\\n\\n      return _providerContract.getLatestPrice(_asset);\\n    } //end fun \\n\\n    /**\\n     * @dev set priceFeed contract\\n     * @param _asset the asset  to fetch price feed\\n     * @param _contract feed contract\\n     *\\n    function setAssetPriceFeedContract(string memory _asset, address _contract) public onlyAdmin {\\n      ACTIVE_PRICE_FEED_PROVIDER.setAssetPriceFeedContract(_asset,_contract);\\n      emit SetAssetPriceFeedContract(_asset,_contract);\\n    }\\n    */\\n\\n}  //end contract \",\"keccak256\":\"0x381d5224578e49cfc7c9774076cbdb7af8640e68c406c5f580ee0d2f6edf8087\",\"license\":\"MIT\"},\"contracts/Storage/DataStore.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"../PermissionManager/PM.sol\\\";\\n//import \\\"./Storage.sol\\\";\\nimport \\\"./Interfaces/IStorage.sol\\\";\\n\\ncontract DataStore is PM {\\n  \\n    event SetStorage(address indexed _contractAddress);\\n\\n    /**\\n     * Store address\\n     */\\n     IStorage public STORAGE_CONTRACT;\\n\\n     bool dataStoreInitialized;\\n\\n    //initialize data store \\n    function initializeDataStore(address _storageContract) internal {\\n\\n        require(!dataStoreInitialized, \\\"DATASTORE_ALREADY_INITIALIZED\\\");\\n        require(_storageContract != address(0),\\\"XPIE:VALID_STORAGE_ADDRESS_REQUIRED\\\");\\n\\n        STORAGE_CONTRACT = IStorage(_storageContract);\\n\\n        emit SetStorage(_storageContract);\\n\\n        dataStoreInitialized = true;\\n    } //end fun\\n\\n    /**\\n    * @dev this returns an instance of he same contract\\n    */\\n    function getDataStore() public view returns(IStorage) {\\n        return STORAGE_CONTRACT;\\n    }\\n\\n    /**\\n     * setStorage\\n     */\\n     function setStorage(address _storageContract) external onlySuperAdmin {\\n        \\n        require(_storageContract != address(0),\\\"XPIE:VALID_STORAGE_ADDRESS_REQUIRED\\\");\\n        \\n        STORAGE_CONTRACT = IStorage(_storageContract);\\n\\n        emit SetStorage(_storageContract);\\n     }\\n        \\n}\",\"keccak256\":\"0x63ba1babd8c19abc3386c385974259f70beadd474c3feb4c822975a97a754b91\",\"license\":\"MIT\"},\"contracts/Storage/Interfaces/IAssetStore.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Commons/AssetsStructs.sol\\\";\\n\\ninterface IAssetStore {\\n\\n    function getNextAssetId() external returns(uint256);\\n    function getTotalAssets() external view returns (uint256);\\n    function saveAssetData(uint256 _id,AssetsStructs.AssetItem memory _data) external; \\n    function getAssetData(uint256 _id) external view returns(AssetsStructs.AssetItem memory);\\n    function getAssetIdByAddress(address _address) external view returns (uint256);\\n    function getAssetDataByAddress(address _address) external view returns (AssetsStructs.AssetItem memory);\\n\\n}\",\"keccak256\":\"0x9ba2fdbcd61e0ad321a1f21055a93a9dd41168f9895c9cebc2510811caebd0f1\",\"license\":\"MIT\"},\"contracts/Storage/Interfaces/IConfigStore.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Commons/ConfigsStructs.sol\\\";\\n\\n\\ninterface IConfigStore {\\n\\n    function getConfigData(string memory _key) external view returns (bytes32);\\n    function addConfigData(string memory _key, bytes32 _value) external;\\n    function getAllConfigData() external view returns (ConfigsStructs.ConfigItem[] memory);\\n\\n}\",\"keccak256\":\"0xc6c282b4ebaa958c831ef1815cacf89a25ee01d4ced6bab9f59448691eb962c5\",\"license\":\"MIT\"},\"contracts/Storage/Interfaces/IOfferStore.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Commons/OffersStructs.sol\\\";\\n\\ninterface IOfferStore {\\n\\n    function getNextOfferId() external returns(uint256);\\n    function getTotalOffers() external view  returns (uint256);\\n    function saveOfferData(uint256  _id, OffersStructs.OfferItem memory _data) external;\\n    function getOfferData(uint256 _id) external view returns(OffersStructs.OfferItem memory);\\n    function deleteOfferData(uint256 _id) external;\\n\\n     function getOfferRating(uint256 offerId) external view returns (uint);\\n    function setOfferRating(uint256 offerId, uint rating) external;\\n\\n    //indexes\\n    function setOfferIndex(bytes32 _indexName, bytes32 _key, uint256 _id) external;\\n}\",\"keccak256\":\"0x8738d12a3d220790b134b2b5a2e398d384cff4f47d46339825b0fdcf94369dd3\",\"license\":\"MIT\"},\"contracts/Storage/Interfaces/IPaymentMethodsStore.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Commons/PaymentMethodsStructs.sol\\\";\\n\\ninterface IPaymentMethodsStore {\\n\\n    function getNextPaymentMethodId() external returns(uint256);\\n    function getNextPaymentMethodCategoryId() external returns(uint256);\\n    function savePaymentMethodsCategoryData(uint256 _id, PaymentMethodsStructs.CategoryItem memory _data ) external;\\n    function savePaymentMethodData(uint256 _id,PaymentMethodsStructs.PaymentMethodItem memory _data ) external;\\n    function deletePaymentMethodsCategoryData(uint256 _id) external;\\n    function deletePaymentMethodData(uint256 _id) external;\\n    function getTotalPaymentMethodsCategories() external view  returns (uint256);\\n    function getTotalPaymentMethods() external view  returns (uint256);\\n    function getPaymentMethodsCategoryData(uint256 _id) external view returns (PaymentMethodsStructs.CategoryItem memory);\\n    function getPaymentMethodData(uint256 _id) external view returns (PaymentMethodsStructs.PaymentMethodItem memory);\\n\\n}\",\"keccak256\":\"0x7ceecd2cac6b2f85872ef8d25e6c6aeba5a8e51a016ed2b25432d5c5cd7ee885\",\"license\":\"MIT\"},\"contracts/Storage/Interfaces/IStorage.sol\":{\"content\":\"\\n/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPaymentMethodsStore.sol\\\";\\nimport \\\"./IAssetStore.sol\\\";\\nimport \\\"./IOfferStore.sol\\\";\\nimport \\\"./IConfigStore.sol\\\";\\n\\ninterface IStorage is IPaymentMethodsStore, IAssetStore, IOfferStore, IConfigStore {\\n    \\n    /**\\n     * Basic Store setters\\n     */\\n    function setUint256(bytes32 _key, uint256 _data) external;\\n    function setInt256(bytes32 _key, int256 _data) external;\\n    function setString(bytes32 _key, string calldata _data) external;\\n    function setBool(bytes32 _key, bool _data) external;\\n    function setAddress(bytes32 _key, address _data) external;\\n    function setBytes(bytes32 _key, bytes memory _data) external;\\n\\n    /**\\n     * Basic store getters\\n     */\\n    function getUint256(bytes32 _key) external view returns(uint256);\\n    function getInt256(bytes32 _key) external view returns(int256);\\n    function getBool(bytes32 _key) external view returns(bool);\\n    function getAddress(bytes32 _key) external view returns(address);\\n    function getString(bytes32 _key) external view returns(string memory);\\n\\n\\n}\",\"keccak256\":\"0xa2be3d7cfc33ebc2572cb5b5763761a62fe3973623adc4ec3205f00b06a3bef0\",\"license\":\"MIT\"},\"contracts/Utils.sol\":{\"content\":\"/*\\n* LibertyPie Project (https://libertypie.com)\\n* @author https://github.com/libertypie (hello@libertypie.com)\\n* @license SPDX-License-Identifier: MIT\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract Utils {\\n\\n    /**\\n     * @dev get chain id\\n     */\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        assembly { id := chainid() }\\n        return id;\\n    } //end fun\\n    \\n    /**\\n     * @dev status msg\\n     * @param _text status text  \\n     * @param _params he parameters \\n     */\\n    function statusMsg(string memory _text, string memory _params) public pure returns(string memory) {\\n        return string(abi.encodePacked(\\\"XPIE:\\\", _text , \\\":\\\", _params));\\n    }\\n\\n\\n    /**\\n     * @dev status msg\\n     * @param _text status text  \\n     * @param _params he parameters \\n     */\\n    function statusMsg(string memory _text, bytes32  _params) public pure returns(string memory) {\\n        return statusMsg(_text,string(abi.encodePacked(_params)));\\n    }\\n\\n\\n    /**\\n     * @dev status msg\\n     * @param _text status text  \\n     */\\n    function statusMsg(string memory _text) public pure returns(string memory) {\\n        return statusMsg(_text,string(abi.encodePacked(\\\"\\\")));\\n    }\\n\\n \\n    function toBytes32(uint256 _data) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_data));\\n    }\\n\\n    function toBytes32(string memory _data) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_data));\\n    }\\n\\n    function toBytes32(address _data) public pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_data));\\n    }\\n\\n}\",\"keccak256\":\"0x2f89e448c9b23ee18563a4c31f3e8b32a3669c6df856bfd11ed0bf75d6b5cc24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526009608081905268436861696e4c696e6b60b81b60a09081526200002c916003919062000294565b50600580546001600160a01b031916301790553480156200004c57600080fd5b50604051620042aa380380620042aa8339810160408190526200006f916200035d565b600180546001600160a01b031916331790556200008c826200009f565b620000978162000190565b505062000394565b600054600160a01b900460ff1615620000ea5760405162461bcd60e51b8152600401808060200182810382526026815260200180620042846026913960400191505060405180910390fd5b6001546001600160a01b03163314620001355760405162461bcd60e51b81526004018080602001828103825260228152602001806200423f6022913960400191505060405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f42efee88e49f0921043269e91c7b4f5bfb699d653f5dc2d161a9c19d87da966491a2506000805460ff60a01b1916600160a01b179055565b600254600160a01b900460ff1615620001f0576040805162461bcd60e51b815260206004820152601d60248201527f4441544153544f52455f414c52454144595f494e495449414c495a4544000000604482015290519081900360640190fd5b6001600160a01b038116620002375760405162461bcd60e51b8152600401808060200182810382526023815260200180620042616023913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517fbed5d690d7485891a709a800c39a0328cac99afa5f118a4cd4a174b9dc26263790600090a2506002805460ff60a01b1916600160a01b179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620002cc576000855562000317565b82601f10620002e757805160ff191683800117855562000317565b8280016001018555821562000317579182015b8281111562000317578251825591602001919060010190620002fa565b506200032592915062000329565b5090565b5b808211156200032557600081556001016200032a565b80516001600160a01b03811681146200035857600080fd5b919050565b6000806040838503121562000370578182fd5b6200037b8362000340565b91506200038b6020840162000340565b90509250929050565b613e9b80620003a46000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c8063769e85a911610146578063a583d76e116100c3578063c59c57b611610087578063c59c57b61461051d578063c89f7bb914610525578063cea86eb214610538578063e115da8e1461054b578063f66a1b711461055e578063fe58265e1461057157610252565b8063a583d76e146104be578063b3e444a7146104d1578063b44bd51d146104e4578063b4f60ebb146104f7578063c19ae2ed1461050a57610252565b80639137c1a71161010a5780639137c1a7146104725780639277e91c146104855780639b103f431461048d578063a1627cd0146104a3578063a31609d6146104ab57610252565b8063769e85a91461041157806378ad03691461042457806382bd3dd41461043757806389f6881d1461044a5780638a5553da1461045f57610252565b80633ba0bdb0116101d4578063635079561161019857806363507956146103b0578063660f5950146103c557806367dfc3bb146103d85780636c9cd097146103eb57806373aafb53146103fe57610252565b80633ba0bdb014610365578063464b41581461036d57806349e4b3e51461038d578063564b81ef146103a057806356604eae146103a857610252565b8063203bdbd11161021b578063203bdbd1146102dd57806325b3ca19146102fd57806327df8f2a146103105780632acada4d1461033057806330b8b2c61461034557610252565b8062dad7d4146102575780630335d86a14610275578063063618421461028857806315a909b1146102a85780631c944100146102bd575b600080fd5b61025f610579565b60405161026c9190613c1c565b60405180910390f35b61025f6102833660046130e6565b610607565b61029b6102963660046135ba565b610633565b60405161026c9190613bfe565b6102bb6102b63660046135ba565b6106f9565b005b6102d06102cb3660046135ba565b61084e565b60405161026c9190613cea565b6102f06102eb366004612fad565b6108e3565b60405161026c9190613ad6565b6102bb61030b3660046130a4565b61097f565b61032361031e366004612fad565b610aa0565b60405161026c9190613a61565b610338610ad0565b60405161026c9190613aea565b610358610353366004612dcf565b610bf4565b60405161026c9190613cd7565b610323610ce0565b61038061037b366004612dcf565b610d5f565b60405161026c9190613c11565b6102bb61039b366004612dcf565b610d72565b610323610e7e565b6102f0610e82565b6103b8610e91565b60405161026c9190613b8b565b6103806103d33660046135ba565b610f0f565b6103236103e6366004613060565b610f1d565b6103806103f9366004613011565b611119565b61032361040c3660046135ba565b6111fe565b6102bb61041f3660046135ba565b611211565b610323610432366004612dcf565b61135b565b610323610445366004613146565b61136e565b61045261165b565b60405161026c9190613b4a565b61025f61046d3660046130a4565b611771565b6102bb610480366004612dcf565b61179c565b6102f06118ef565b6104956118fe565b60405161026c929190613b5d565b61029b611919565b6102bb6104b9366004613011565b6119b1565b6103236104cc3660046135d2565b611aab565b6103586104df3660046135ba565b611d8f565b6103236104f2366004612fad565b611e1e565b61025f610505366004612fad565b611ea3565b6102bb610518366004613011565b611eb8565b610323612036565b6102bb6105333660046136b3565b612078565b610323610546366004612deb565b6121f3565b6102bb6105593660046134c5565b612494565b61032361056c366004612fad565b6126d1565b6102f0612769565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b505050505081565b6060828260405160200161061c929190613a89565b604051602081830303815290604052905092915050565b6060600061063f612036565b90506000816001016001600160401b038111801561065c57600080fd5b5060405190808252806020026020018201604052801561069657816020015b610683612b58565b81526020019060019003908161067b5790505b50905060015b8281116106ef5760006106ae8261084e565b90508581604001511480156106c857506000816020015151115b156106e657808383815181106106da57fe5b60200260200101819052505b5060010161069c565b509150505b919050565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d602081101561076e57600080fd5b50516107af576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6107b7612769565b6001600160a01b031663ef4b51e8826040518263ffffffff1660e01b81526004016107e29190613a61565b600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050507f58169af9bade406262179496a9592f94be97c18b38f79f7fad0ca7ff7777cfd8816040516108439190613a61565b60405180910390a150565b610856612b58565b61085e612769565b6001600160a01b031663f3fc9120836040518263ffffffff1660e01b81526004016108899190613a61565b60006040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108dd91908101906133d8565b92915050565b6000806004836040516108f69190613a6a565b90815260408051918290036020908101832054838301909252601b83527f434841494e5f464545445f434f4e54524143545f4d495353494e470000000000908301526001600160a01b03169150811515906109519085610607565b906109785760405162461bcd60e51b815260040161096f9190613c1c565b60405180910390fd5b5092915050565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d60208110156109f457600080fd5b5051610a35576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b610a3d612769565b6001600160a01b031663ec187dde83836040518363ffffffff1660e01b8152600401610a6a929190613c59565b600060405180830381600087803b158015610a8457600080fd5b505af1158015610a98573d6000803e3d6000fd5b505050505050565b600081604051602001610ab39190613a6a565b604051602081830303815290604052805190602001209050919050565b60606000610adc612769565b6001600160a01b0316636e07302b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1457600080fd5b505afa158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c9190612f95565b90506000816001016001600160401b0381118015610b6957600080fd5b50604051908082528060200260200182016040528015610ba357816020015b610b90612b9f565b815260200190600190039081610b885790505b50905060015b828111610bed576000610bbb82611d8f565b9050610bc681612778565b15610be45780838381518110610bd857fe5b60200260200101819052505b50600101610ba9565b5091505090565b610bfc612b9f565b6000610c06612769565b6001600160a01b031663f7d645fb846040518263ffffffff1660e01b8152600401610c319190613ad6565b60206040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c819190612f95565b905060008111610ca35760405162461bcd60e51b815260040161096f90613cab565b6000610cae82611d8f565b905080610120015115156001151514610cd95760405162461bcd60e51b815260040161096f90613c7b565b9392505050565b6000610cea612769565b6001600160a01b0316633ba0bdb06040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2257600080fd5b505afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190612f95565b905090565b60006108dd610d6d83610bf4565b612778565b6000546040805163df7f453b60e01b815233600482015290516001600160a01b039092169163df7f453b91602480820192602092909190829003018186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d6020811015610de757600080fd5b5051610e36576040805162461bcd60e51b815260206004820152601960248201527813d3931657d4d554115497d05113525394d7d0531313d5d151603a1b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f42efee88e49f0921043269e91c7b4f5bfb699d653f5dc2d161a9c19d87da966491a250565b4690565b6000546001600160a01b031681565b6060610e9b612769565b6001600160a01b031663affd06346040518163ffffffff1660e01b815260040160006040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d5a9190810190612ec2565b60006108dd610d6d83611d8f565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b158015610f6957600080fd5b505afa158015610f7d573d6000803e3d6000fd5b505050506040513d6020811015610f9357600080fd5b5051610fd4576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6000610fde612769565b6001600160a01b031663494470166040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190612f95565b905060006040518060600160405280838152602001868152602001851515815250905061107b612769565b6001600160a01b031663630f310f83836040518363ffffffff1660e01b81526004016110a8929190613d16565b600060405180830381600087803b1580156110c257600080fd5b505af11580156110d6573d6000803e3d6000fd5b505050507f5e9144497b8db39c1252f7fdcb00635af80c9d0809b512495c373ac8b9a2d48f826040516111099190613a61565b60405180910390a1509392505050565b6000805460408051636c9cd09760e01b81526001600160a01b03858116602483015260048201928352865160448301528651931692636c9cd097928792879282916064019060208601908083838c5b83811015611180578181015183820152602001611168565b50505050905090810190601f1680156111ad5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d60208110156111f557600080fd5b50519392505050565b600081604051602001610ab39190613a61565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b15801561125c57600080fd5b505afa158015611270573d6000803e3d6000fd5b505050506040513d602081101561128657600080fd5b50516112c7576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6112cf612769565b6001600160a01b031663db8164dc826040518263ffffffff1660e01b81526004016112fa9190613a61565b600060405180830381600087803b15801561131457600080fd5b505af1158015611328573d6000803e3d6000fd5b505050507ff71cfe84cf6a68cdb1bfa1f1db7ac1c20844dddfc12ec663a80454a6b1cab57f816040516108439190613a61565b600081604051602001610ab39190613a44565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156113ba57600080fd5b505afa1580156113ce573d6000803e3d6000fd5b505050506040513d60208110156113e457600080fd5b5051611425576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b60008711801561143c5750611438610ce0565b8711155b6114716040518060400160405280601081526020016f554e4b4e4f574e5f43415445474f525960801b81525061046d8a6111fe565b9061148f5760405162461bcd60e51b815260040161096f9190613c1c565b5060008851116114d36040518060400160405280601c81526020017f5041594d454e545f4d4554484f445f4e414d455f524551554952454400000000815250611ea3565b906114f15760405162461bcd60e51b815260040161096f9190613c1c565b5060006114fc612769565b6001600160a01b031663c04f268e6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561153657600080fd5b505af115801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e9190612f95565b905060006040518061010001604052808381526020018b81526020018a815260200189815260200188815260200187815260200186815260200185151581525090506115b8612769565b6001600160a01b031663b542276783836040518363ffffffff1660e01b81526004016115e5929190613d2f565b600060405180830381600087803b1580156115ff57600080fd5b505af1158015611613573d6000803e3d6000fd5b505050507fab7a036df44e4f9d12893de732519db61274fde697eb92fdbeb65b7fcb13b7cf826040516116469190613a61565b60405180910390a15098975050505050505050565b60606000611667610ce0565b90506000816001016001600160401b038111801561168457600080fd5b506040519080825280602002602001820160405280156116be57816020015b6116ab612c02565b8152602001906001900390816116a35790505b50905060015b828111610bed576116d3612769565b6001600160a01b03166302acd7a4826040518263ffffffff1660e01b81526004016116fe9190613a61565b60006040518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611752919081019061333f565b82828151811061175e57fe5b60209081029190910101526001016116c4565b6060610cd983836040516020016117889190613a61565b604051602081830303815290604052610607565b6000546040805163df7f453b60e01b815233600482015290516001600160a01b039092169163df7f453b91602480820192602092909190829003018186803b1580156117e757600080fd5b505afa1580156117fb573d6000803e3d6000fd5b505050506040513d602081101561181157600080fd5b5051611860576040805162461bcd60e51b815260206004820152601960248201527813d3931657d4d554115497d05113525394d7d0531313d5d151603a1b604482015290519081900360640190fd5b6001600160a01b0381166118a55760405162461bcd60e51b8152600401808060200182810382526023815260200180613e436023913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517fbed5d690d7485891a709a800c39a0328cac99afa5f118a4cd4a174b9dc26263790600090a250565b6002546001600160a01b031681565b60608061190961165b565b611911611919565b915091509091565b60606000611925612036565b90506000816001016001600160401b038111801561194257600080fd5b5060405190808252806020026020018201604052801561197c57816020015b611969612b58565b8152602001906001900390816119615790505b50905060015b828111610bed576119928161084e565b82828151811061199e57fe5b6020908102919091010152600101611982565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d6020811015611a2657600080fd5b5051611a67576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b80600483604051611a789190613a6a565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b158015611af757600080fd5b505afa158015611b0b573d6000803e3d6000fd5b505050506040513d6020811015611b2157600080fd5b5051611b62576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6000611b6d8b611d8f565b905060006001600160a01b031681602001516001600160a01b03161415611bb86040518060400160405280600d81526020016c155392d393d5d397d054d4d155609a1b815250611ea3565b90611bd65760405162461bcd60e51b815260040161096f9190613c1c565b5060008a905060006040518061018001604052808e81526020018d6001600160a01b03168152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3857600080fd5b505afa158015611c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c70919061375a565b60ff1681526020018c151581526020018b6001600160a01b031681526020018a8152602001898152602001888152602001876001600160a01b0316815260200186151581526020018461014001518152602001428152509050611d4781836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d429190810190612fdf565b6127a0565b7f44fdf11a69f146b3a8661496708f46842c61c3f01f6080cf2fbd5b9e9d1ea9608d604051611d769190613a61565b60405180910390a1509a9b9a5050505050505050505050565b611d97612b9f565b611d9f612769565b6001600160a01b0316637d1108f5836040518263ffffffff1660e01b8152600401611dca9190613a61565b60006040518083038186803b158015611de257600080fd5b505afa158015611df6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108dd91908101906131fb565b6000611e28612769565b6001600160a01b031663724fc72c836040518263ffffffff1660e01b8152600401611e539190613c1c565b60206040518083038186803b158015611e6b57600080fd5b505afa158015611e7f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190612f95565b60606108dd8260405160200161178890613a86565b6000546040805163df7f453b60e01b815233600482015290516001600160a01b039092169163df7f453b91602480820192602092909190829003018186803b158015611f0357600080fd5b505afa158015611f17573d6000803e3d6000fd5b505050506040513d6020811015611f2d57600080fd5b5051611f7c576040805162461bcd60e51b815260206004820152601960248201527813d3931657d4d554115497d05113525394d7d0531313d5d151603a1b604482015290519081900360640190fd5b600080546040805163c19ae2ed60e01b81526001600160a01b0385811660248301526004820192835286516044830152865193169363c19ae2ed93879387939092839260649092019160208701918190849084905b83811015611fe9578181015183820152602001611fd1565b50505050905090810190601f1680156120165780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610a8457600080fd5b6000612040612769565b6001600160a01b031663c59c57b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2257600080fd5b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156120c357600080fd5b505afa1580156120d7573d6000803e3d6000fd5b505050506040513d60208110156120ed57600080fd5b505161212e576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b600060405180606001604052808581526020018481526020018315158152509050612157612769565b6001600160a01b031663630f310f85836040518363ffffffff1660e01b8152600401612184929190613d16565b600060405180830381600087803b15801561219e57600080fd5b505af11580156121b2573d6000803e3d6000fd5b505050507ff7cce03a6fac68a25a7d5fbc0285c5ad178f0ebd8fcd33ed52e0695b9e1d0b64846040516121e59190613a61565b60405180910390a150505050565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d602081101561226957600080fd5b50516122aa576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b8860006122b5612769565b6001600160a01b031663541fa9e76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156122ef57600080fd5b505af1158015612303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123279190612f95565b905060006040518061018001604052808381526020018d6001600160a01b03168152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561238557600080fd5b505afa158015612399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bd919061375a565b60ff1681526020018c151581526020018b6001600160a01b031681526020018a8152602001898152602001888152602001876001600160a01b03168152602001861515815260200142815260200142815250905061244e81846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611d0657600080fd5b7fad4b90e063df7b4a2923a77e82769ddbfaad31cbebd03a93d93951cab140b5338260405161247d9190613a61565b60405180910390a1509a9950505050505050505050565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156124df57600080fd5b505afa1580156124f3573d6000803e3d6000fd5b505050506040513d602081101561250957600080fd5b505161254a576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b815115801590612562575061255d612036565b825111155b6125a160405180604001604052806016815260200175155392d393d5d397d410565351539517d351551213d160521b81525061046d85600001516111fe565b906125bf5760405162461bcd60e51b815260040161096f9190613c1c565b506000811180156125d757506125d3610ce0565b8111155b61260c6040518060400160405280601081526020016f554e4b4e4f574e5f43415445474f525960801b81525061046d846111fe565b9061262a5760405162461bcd60e51b815260040161096f9190613c1c565b50612633612769565b825160405163b542276760e01b81526001600160a01b03929092169163b542276791612663918690600401613d2f565b600060405180830381600087803b15801561267d57600080fd5b505af1158015612691573d6000803e3d6000fd5b505083516040517fb4692f109985f7be03460badace503fa5013612352e0b842d0ef1200f0dce0f193506126c59250613a61565b60405180910390a15050565b6000806126dd836108e3565b90506000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561272057600080fd5b505afa158015612734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612758919061370b565b50919b9a5050505050505050505050565b6002546001600160a01b031690565b60208101516000906001600160a01b0316158015906108dd5750506101200151151560011490565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156127eb57600080fd5b505afa1580156127ff573d6000803e3d6000fd5b505050506040513d602081101561281557600080fd5b5051612856576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6000612860612769565b6001600160a01b0316636e07302b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561289857600080fd5b505afa1580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190612f95565b8351909150158015906128e4575082518110155b6129156040518060400160405280601081526020016f1253959053125117d054d4d15517d25160821b815250611ea3565b906129335760405162461bcd60e51b815260040161096f9190613c1c565b5060006001600160a01b031683602001516001600160a01b0316141561298d6040518060400160405280601881526020017f494e41564c49445f434f4e54524143545f414444524553530000000000000000815250611ea3565b906129ab5760405162461bcd60e51b815260040161096f9190613c1c565b5060006001600160a01b03168361010001516001600160a01b031614156129e9604051806060016040528060238152602001613e0060239139611ea3565b90612a075760405162461bcd60e51b815260040161096f9190613c1c565b5060006001600160a01b031683602001516001600160a01b03161415612a616040518060400160405280601e81526020017f494e56414c49445f41535345545f434f4e54524143545f414444524553530000815250611ea3565b90612a7f5760405162461bcd60e51b815260040161096f9190613c1c565b5060055461010084015160405163518b04eb60e11b81526001600160a01b039092169163a31609d691612ab791869190600401613c2f565b600060405180830381600087803b158015612ad157600080fd5b505af1158015612ae5573d6000803e3d6000fd5b50505050612af1612769565b8351604051636971082560e11b81526001600160a01b03929092169163d2e2104a91612b21918790600401613cfd565b600060405180830381600087803b158015612b3b57600080fd5b505af1158015612b4f573d6000803e3d6000fd5b50505050505050565b604051806101000160405280600081526020016060815260200160008152602001600081526020016000815260200160608152602001606081526020016000151581525090565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c0820181905260e082015261010081018290526101208101829052610140810182905261016081019190915290565b604051806060016040528060008152602001606081526020016000151581525090565b80356106f481613dd9565b80516106f481613dd9565b600082601f830112612c4b578081fd5b81356020612c60612c5b83613d6b565b613d48565b82815281810190858301855b85811015612c9557612c83898684358b0101612d0d565b84529284019290840190600101612c6c565b5090979650505050505050565b600082601f830112612cb2578081fd5b81516020612cc2612c5b83613d6b565b82815281810190858301855b85811015612c9557612ce5898684518b0101612d59565b84529284019290840190600101612cce565b80356106f481613df1565b80516106f481613df1565b600082601f830112612d1d578081fd5b8135612d2b612c5b82613d88565b818152846020838601011115612d3f578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612d69578081fd5b8151612d77612c5b82613d88565b818152846020838601011115612d8b578283fd5b612d9c826020830160208701613da9565b949350505050565b805169ffffffffffffffffffff811681146106f457600080fd5b805160ff811681146106f457600080fd5b600060208284031215612de0578081fd5b8135610cd981613dd9565b600080600080600080600080610100898b031215612e07578384fd5b612e1089612c25565b9750612e1e60208a01612cf7565b9650612e2c60408a01612c25565b955060608901356001600160401b0380821115612e47578586fd5b612e538c838d01612d0d565b965060808b0135915080821115612e68578586fd5b612e748c838d01612d0d565b955060a08b0135915080821115612e89578485fd5b50612e968b828c01612d0d565b935050612ea560c08a01612c25565b9150612eb360e08a01612cf7565b90509295985092959890939650565b60006020808385031215612ed4578182fd5b82516001600160401b0380821115612eea578384fd5b818501915085601f830112612efd578384fd5b8151612f0b612c5b82613d6b565b81815284810190848601875b84811015612f865781518701604080601f19838f03011215612f37578a8bfd5b80518181018181108a82111715612f4a57fe5b8252828b015189811115612f5c578c8dfd5b612f6a8f8d83870101612d59565b8252509101518982015284529287019290870190600101612f17565b50909998505050505050505050565b600060208284031215612fa6578081fd5b5051919050565b600060208284031215612fbe578081fd5b81356001600160401b03811115612fd3578182fd5b612d9c84828501612d0d565b600060208284031215612ff0578081fd5b81516001600160401b03811115613005578182fd5b612d9c84828501612d59565b60008060408385031215613023578182fd5b82356001600160401b03811115613038578283fd5b61304485828601612d0d565b925050602083013561305581613dd9565b809150509250929050565b60008060408385031215613072578182fd5b82356001600160401b03811115613087578283fd5b61309385828601612d0d565b925050602083013561305581613df1565b600080604083850312156130b6578182fd5b82356001600160401b038111156130cb578283fd5b6130d785828601612d0d565b95602094909401359450505050565b600080604083850312156130f8578182fd5b82356001600160401b038082111561310e578384fd5b61311a86838701612d0d565b9350602085013591508082111561312f578283fd5b5061313c85828601612d0d565b9150509250929050565b600080600080600080600060e0888a031215613160578081fd5b87356001600160401b0380821115613176578283fd5b6131828b838c01612d0d565b985060208a0135975060408a0135965060608a0135955060808a01359150808211156131ac578283fd5b6131b88b838c01612c3b565b945060a08a01359150808211156131cd578283fd5b506131da8a828b01612c3b565b92505060c08801356131eb81613df1565b8091505092959891949750929550565b60006020828403121561320c578081fd5b81516001600160401b0380821115613222578283fd5b8184019150610180808387031215613238578384fd5b61324181613d48565b90508251815261325360208401612c30565b602082015261326460408401612dbe565b604082015261327560608401612d02565b606082015261328660808401612c30565b608082015260a08301518281111561329c578485fd5b6132a887828601612d59565b60a08301525060c0830151828111156132bf578485fd5b6132cb87828601612d59565b60c08301525060e0830151828111156132e2578485fd5b6132ee87828601612d59565b60e0830152506101009150613304828401612c30565b828201526101209150613318828401612d02565b91810191909152610140828101519082015261016091820151918101919091529392505050565b600060208284031215613350578081fd5b81516001600160401b0380821115613366578283fd5b9083019060608286031215613379578283fd5b60405160608101818110838211171561338e57fe5b604052825181526020830151828111156133a6578485fd5b6133b287828601612d59565b602083015250604083015192506133c883613df1565b6040810192909252509392505050565b6000602082840312156133e9578081fd5b81516001600160401b03808211156133ff578283fd5b8184019150610100808387031215613415578384fd5b61341e81613d48565b905082518152602083015182811115613435578485fd5b61344187828601612d59565b60208301525060408301516040820152606083015160608201526080830151608082015260a083015182811115613476578485fd5b61348287828601612ca2565b60a08301525060c083015182811115613499578485fd5b6134a587828601612ca2565b60c0830152506134b760e08401612d02565b60e082015295945050505050565b600080604083850312156134d7578182fd5b82356001600160401b03808211156134ed578384fd5b8185019150610100808388031215613503578485fd5b61350c81613d48565b905082358152602083013582811115613523578586fd5b61352f88828601612d0d565b60208301525060408301356040820152606083013560608201526080830135608082015260a083013582811115613564578586fd5b61357088828601612c3b565b60a08301525060c083013582811115613587578586fd5b61359388828601612c3b565b60c0830152506135a560e08401612cf7565b60e08201529660209590950135955050505050565b6000602082840312156135cb578081fd5b5035919050565b60008060008060008060008060006101208a8c0312156135f0578283fd5b8935985061360060208b01612c25565b975061360e60408b01612cf7565b965061361c60608b01612c25565b955060808a01356001600160401b0380821115613637578485fd5b6136438d838e01612d0d565b965060a08c0135915080821115613658578485fd5b6136648d838e01612d0d565b955060c08c0135915080821115613679578485fd5b506136868c828d01612d0d565b93505061369560e08b01612c25565b91506136a46101008b01612cf7565b90509295985092959850929598565b6000806000606084860312156136c7578081fd5b8335925060208401356001600160401b038111156136e3578182fd5b6136ef86828701612d0d565b925050604084013561370081613df1565b809150509250925092565b600080600080600060a08688031215613722578283fd5b61372b86612da4565b945060208601519350604086015192506060860151915061374e60808701612da4565b90509295509295909350565b60006020828403121561376b578081fd5b610cd982612dbe565b6001600160a01b03169052565b6000815180845260208085018081965082840281019150828601855b858110156137c75782840389526137b5848351613866565b9885019893509084019060010161379d565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b858110156137c757828403895261380884835161397d565b988501989350908401906001016137f0565b6000815180845260208085018081965082840281019150828601855b858110156137c757828403895261384e8483516139b2565b98850198935090840190600101613836565b15159052565b6000815180845261387e816020860160208601613da9565b601f01601f19169290920160200192915050565b60006101808251845260208301516138ad6020860182613774565b5060408301516138c06040860182613a3d565b5060608301516138d36060860182613860565b5060808301516138e66080860182613774565b5060a08301518160a08601526138fe82860182613866565b91505060c083015184820360c08601526139188282613866565b91505060e083015184820360e08601526139328282613866565b9150506101008084015161394882870182613774565b50506101208084015161395d82870182613860565b505061014083810151908501526101609283015192909301919091525090565b60008151835260208201516060602085015261399c6060850182613866565b6040938401511515949093019390935250919050565b60006101008251845260208301518160208601526139d282860182613866565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a0860152613a0a8282613781565b91505060c083015184820360c0860152613a248282613781565b91505060e0830151151560e08501528091505092915050565b60ff169052565b60609190911b6bffffffffffffffffffffffff1916815260140190565b90815260200190565b60008251613a7c818460208701613da9565b9190910192915050565b90565b6000642c2824a29d60d91b82528351613aa9816005850160208801613da9565b601d60f91b6005918401918201528351613aca816006840160208801613da9565b01600601949350505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613b3d57603f19888603018452613b2b858351613892565b94509285019290850190600101613b0f565b5092979650505050505050565b600060208252610cd960208301846137d4565b600060408252613b7060408301856137d4565b8281036020840152613b82818561381a565b95945050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613bf057888303603f1901855281518051878552613bd388860182613866565b918901519489019490945294870194925090860190600101613baf565b509098975050505050505050565b600060208252610cd9602083018461381a565b901515815260200190565b600060208252610cd96020830184613866565b600060408252613c426040830185613866565b905060018060a01b03831660208301529392505050565b600060408252613c6c6040830185613866565b90508260208301529392505050565b602080825260169082015275161412514e9054d4d15517d393d517d153905093115160521b604082015260600190565b602080825260129082015271161412514e955392d393d5d397d054d4d15560721b604082015260600190565b600060208252610cd96020830184613892565b600060208252610cd960208301846139b2565b600083825260406020830152612d9c6040830184613892565b600083825260406020830152612d9c604083018461397d565b600083825260406020830152612d9c60408301846139b2565b6040518181016001600160401b0381118282101715613d6357fe5b604052919050565b60006001600160401b03821115613d7e57fe5b5060209081020190565b60006001600160401b03821115613d9b57fe5b50601f01601f191660200190565b60005b83811015613dc4578181015183820152602001613dac565b83811115613dd3576000848401525b50505050565b6001600160a01b0381168114613dee57600080fd5b50565b8015158114613dee57600080fdfe494e41564c49445f50524943455f464545445f434f4e54524143545f414444524553534f4e4c595f41444d494e535f414c4c4f57454400000000000000000000000000585049453a56414c49445f53544f524147455f414444524553535f5245515549524544a26469706673582212209fbae181828089d56d92d2e0daecc664faac18ca894f065e16cb9a63ed85171464736f6c634300070600334f4e4c595f434f4e54524143545f4f574e45525f43414e5f494e495449414c495a45585049453a56414c49445f53544f524147455f414444524553535f52455155495245445045524d495353494f4e5f4d414e414745525f414c52454144595f494e495449414c495a4544",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c8063769e85a911610146578063a583d76e116100c3578063c59c57b611610087578063c59c57b61461051d578063c89f7bb914610525578063cea86eb214610538578063e115da8e1461054b578063f66a1b711461055e578063fe58265e1461057157610252565b8063a583d76e146104be578063b3e444a7146104d1578063b44bd51d146104e4578063b4f60ebb146104f7578063c19ae2ed1461050a57610252565b80639137c1a71161010a5780639137c1a7146104725780639277e91c146104855780639b103f431461048d578063a1627cd0146104a3578063a31609d6146104ab57610252565b8063769e85a91461041157806378ad03691461042457806382bd3dd41461043757806389f6881d1461044a5780638a5553da1461045f57610252565b80633ba0bdb0116101d4578063635079561161019857806363507956146103b0578063660f5950146103c557806367dfc3bb146103d85780636c9cd097146103eb57806373aafb53146103fe57610252565b80633ba0bdb014610365578063464b41581461036d57806349e4b3e51461038d578063564b81ef146103a057806356604eae146103a857610252565b8063203bdbd11161021b578063203bdbd1146102dd57806325b3ca19146102fd57806327df8f2a146103105780632acada4d1461033057806330b8b2c61461034557610252565b8062dad7d4146102575780630335d86a14610275578063063618421461028857806315a909b1146102a85780631c944100146102bd575b600080fd5b61025f610579565b60405161026c9190613c1c565b60405180910390f35b61025f6102833660046130e6565b610607565b61029b6102963660046135ba565b610633565b60405161026c9190613bfe565b6102bb6102b63660046135ba565b6106f9565b005b6102d06102cb3660046135ba565b61084e565b60405161026c9190613cea565b6102f06102eb366004612fad565b6108e3565b60405161026c9190613ad6565b6102bb61030b3660046130a4565b61097f565b61032361031e366004612fad565b610aa0565b60405161026c9190613a61565b610338610ad0565b60405161026c9190613aea565b610358610353366004612dcf565b610bf4565b60405161026c9190613cd7565b610323610ce0565b61038061037b366004612dcf565b610d5f565b60405161026c9190613c11565b6102bb61039b366004612dcf565b610d72565b610323610e7e565b6102f0610e82565b6103b8610e91565b60405161026c9190613b8b565b6103806103d33660046135ba565b610f0f565b6103236103e6366004613060565b610f1d565b6103806103f9366004613011565b611119565b61032361040c3660046135ba565b6111fe565b6102bb61041f3660046135ba565b611211565b610323610432366004612dcf565b61135b565b610323610445366004613146565b61136e565b61045261165b565b60405161026c9190613b4a565b61025f61046d3660046130a4565b611771565b6102bb610480366004612dcf565b61179c565b6102f06118ef565b6104956118fe565b60405161026c929190613b5d565b61029b611919565b6102bb6104b9366004613011565b6119b1565b6103236104cc3660046135d2565b611aab565b6103586104df3660046135ba565b611d8f565b6103236104f2366004612fad565b611e1e565b61025f610505366004612fad565b611ea3565b6102bb610518366004613011565b611eb8565b610323612036565b6102bb6105333660046136b3565b612078565b610323610546366004612deb565b6121f3565b6102bb6105593660046134c5565b612494565b61032361056c366004612fad565b6126d1565b6102f0612769565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b505050505081565b6060828260405160200161061c929190613a89565b604051602081830303815290604052905092915050565b6060600061063f612036565b90506000816001016001600160401b038111801561065c57600080fd5b5060405190808252806020026020018201604052801561069657816020015b610683612b58565b81526020019060019003908161067b5790505b50905060015b8281116106ef5760006106ae8261084e565b90508581604001511480156106c857506000816020015151115b156106e657808383815181106106da57fe5b60200260200101819052505b5060010161069c565b509150505b919050565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d602081101561076e57600080fd5b50516107af576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6107b7612769565b6001600160a01b031663ef4b51e8826040518263ffffffff1660e01b81526004016107e29190613a61565b600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050507f58169af9bade406262179496a9592f94be97c18b38f79f7fad0ca7ff7777cfd8816040516108439190613a61565b60405180910390a150565b610856612b58565b61085e612769565b6001600160a01b031663f3fc9120836040518263ffffffff1660e01b81526004016108899190613a61565b60006040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108dd91908101906133d8565b92915050565b6000806004836040516108f69190613a6a565b90815260408051918290036020908101832054838301909252601b83527f434841494e5f464545445f434f4e54524143545f4d495353494e470000000000908301526001600160a01b03169150811515906109519085610607565b906109785760405162461bcd60e51b815260040161096f9190613c1c565b60405180910390fd5b5092915050565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d60208110156109f457600080fd5b5051610a35576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b610a3d612769565b6001600160a01b031663ec187dde83836040518363ffffffff1660e01b8152600401610a6a929190613c59565b600060405180830381600087803b158015610a8457600080fd5b505af1158015610a98573d6000803e3d6000fd5b505050505050565b600081604051602001610ab39190613a6a565b604051602081830303815290604052805190602001209050919050565b60606000610adc612769565b6001600160a01b0316636e07302b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1457600080fd5b505afa158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c9190612f95565b90506000816001016001600160401b0381118015610b6957600080fd5b50604051908082528060200260200182016040528015610ba357816020015b610b90612b9f565b815260200190600190039081610b885790505b50905060015b828111610bed576000610bbb82611d8f565b9050610bc681612778565b15610be45780838381518110610bd857fe5b60200260200101819052505b50600101610ba9565b5091505090565b610bfc612b9f565b6000610c06612769565b6001600160a01b031663f7d645fb846040518263ffffffff1660e01b8152600401610c319190613ad6565b60206040518083038186803b158015610c4957600080fd5b505afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c819190612f95565b905060008111610ca35760405162461bcd60e51b815260040161096f90613cab565b6000610cae82611d8f565b905080610120015115156001151514610cd95760405162461bcd60e51b815260040161096f90613c7b565b9392505050565b6000610cea612769565b6001600160a01b0316633ba0bdb06040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2257600080fd5b505afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190612f95565b905090565b60006108dd610d6d83610bf4565b612778565b6000546040805163df7f453b60e01b815233600482015290516001600160a01b039092169163df7f453b91602480820192602092909190829003018186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d6020811015610de757600080fd5b5051610e36576040805162461bcd60e51b815260206004820152601960248201527813d3931657d4d554115497d05113525394d7d0531313d5d151603a1b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f42efee88e49f0921043269e91c7b4f5bfb699d653f5dc2d161a9c19d87da966491a250565b4690565b6000546001600160a01b031681565b6060610e9b612769565b6001600160a01b031663affd06346040518163ffffffff1660e01b815260040160006040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d5a9190810190612ec2565b60006108dd610d6d83611d8f565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b158015610f6957600080fd5b505afa158015610f7d573d6000803e3d6000fd5b505050506040513d6020811015610f9357600080fd5b5051610fd4576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6000610fde612769565b6001600160a01b031663494470166040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190612f95565b905060006040518060600160405280838152602001868152602001851515815250905061107b612769565b6001600160a01b031663630f310f83836040518363ffffffff1660e01b81526004016110a8929190613d16565b600060405180830381600087803b1580156110c257600080fd5b505af11580156110d6573d6000803e3d6000fd5b505050507f5e9144497b8db39c1252f7fdcb00635af80c9d0809b512495c373ac8b9a2d48f826040516111099190613a61565b60405180910390a1509392505050565b6000805460408051636c9cd09760e01b81526001600160a01b03858116602483015260048201928352865160448301528651931692636c9cd097928792879282916064019060208601908083838c5b83811015611180578181015183820152602001611168565b50505050905090810190601f1680156111ad5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d60208110156111f557600080fd5b50519392505050565b600081604051602001610ab39190613a61565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b15801561125c57600080fd5b505afa158015611270573d6000803e3d6000fd5b505050506040513d602081101561128657600080fd5b50516112c7576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6112cf612769565b6001600160a01b031663db8164dc826040518263ffffffff1660e01b81526004016112fa9190613a61565b600060405180830381600087803b15801561131457600080fd5b505af1158015611328573d6000803e3d6000fd5b505050507ff71cfe84cf6a68cdb1bfa1f1db7ac1c20844dddfc12ec663a80454a6b1cab57f816040516108439190613a61565b600081604051602001610ab39190613a44565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156113ba57600080fd5b505afa1580156113ce573d6000803e3d6000fd5b505050506040513d60208110156113e457600080fd5b5051611425576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b60008711801561143c5750611438610ce0565b8711155b6114716040518060400160405280601081526020016f554e4b4e4f574e5f43415445474f525960801b81525061046d8a6111fe565b9061148f5760405162461bcd60e51b815260040161096f9190613c1c565b5060008851116114d36040518060400160405280601c81526020017f5041594d454e545f4d4554484f445f4e414d455f524551554952454400000000815250611ea3565b906114f15760405162461bcd60e51b815260040161096f9190613c1c565b5060006114fc612769565b6001600160a01b031663c04f268e6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561153657600080fd5b505af115801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e9190612f95565b905060006040518061010001604052808381526020018b81526020018a815260200189815260200188815260200187815260200186815260200185151581525090506115b8612769565b6001600160a01b031663b542276783836040518363ffffffff1660e01b81526004016115e5929190613d2f565b600060405180830381600087803b1580156115ff57600080fd5b505af1158015611613573d6000803e3d6000fd5b505050507fab7a036df44e4f9d12893de732519db61274fde697eb92fdbeb65b7fcb13b7cf826040516116469190613a61565b60405180910390a15098975050505050505050565b60606000611667610ce0565b90506000816001016001600160401b038111801561168457600080fd5b506040519080825280602002602001820160405280156116be57816020015b6116ab612c02565b8152602001906001900390816116a35790505b50905060015b828111610bed576116d3612769565b6001600160a01b03166302acd7a4826040518263ffffffff1660e01b81526004016116fe9190613a61565b60006040518083038186803b15801561171657600080fd5b505afa15801561172a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611752919081019061333f565b82828151811061175e57fe5b60209081029190910101526001016116c4565b6060610cd983836040516020016117889190613a61565b604051602081830303815290604052610607565b6000546040805163df7f453b60e01b815233600482015290516001600160a01b039092169163df7f453b91602480820192602092909190829003018186803b1580156117e757600080fd5b505afa1580156117fb573d6000803e3d6000fd5b505050506040513d602081101561181157600080fd5b5051611860576040805162461bcd60e51b815260206004820152601960248201527813d3931657d4d554115497d05113525394d7d0531313d5d151603a1b604482015290519081900360640190fd5b6001600160a01b0381166118a55760405162461bcd60e51b8152600401808060200182810382526023815260200180613e436023913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517fbed5d690d7485891a709a800c39a0328cac99afa5f118a4cd4a174b9dc26263790600090a250565b6002546001600160a01b031681565b60608061190961165b565b611911611919565b915091509091565b60606000611925612036565b90506000816001016001600160401b038111801561194257600080fd5b5060405190808252806020026020018201604052801561197c57816020015b611969612b58565b8152602001906001900390816119615790505b50905060015b828111610bed576119928161084e565b82828151811061199e57fe5b6020908102919091010152600101611982565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d6020811015611a2657600080fd5b5051611a67576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b80600483604051611a789190613a6a565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b158015611af757600080fd5b505afa158015611b0b573d6000803e3d6000fd5b505050506040513d6020811015611b2157600080fd5b5051611b62576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6000611b6d8b611d8f565b905060006001600160a01b031681602001516001600160a01b03161415611bb86040518060400160405280600d81526020016c155392d393d5d397d054d4d155609a1b815250611ea3565b90611bd65760405162461bcd60e51b815260040161096f9190613c1c565b5060008a905060006040518061018001604052808e81526020018d6001600160a01b03168152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3857600080fd5b505afa158015611c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c70919061375a565b60ff1681526020018c151581526020018b6001600160a01b031681526020018a8152602001898152602001888152602001876001600160a01b0316815260200186151581526020018461014001518152602001428152509050611d4781836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d429190810190612fdf565b6127a0565b7f44fdf11a69f146b3a8661496708f46842c61c3f01f6080cf2fbd5b9e9d1ea9608d604051611d769190613a61565b60405180910390a1509a9b9a5050505050505050505050565b611d97612b9f565b611d9f612769565b6001600160a01b0316637d1108f5836040518263ffffffff1660e01b8152600401611dca9190613a61565b60006040518083038186803b158015611de257600080fd5b505afa158015611df6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108dd91908101906131fb565b6000611e28612769565b6001600160a01b031663724fc72c836040518263ffffffff1660e01b8152600401611e539190613c1c565b60206040518083038186803b158015611e6b57600080fd5b505afa158015611e7f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190612f95565b60606108dd8260405160200161178890613a86565b6000546040805163df7f453b60e01b815233600482015290516001600160a01b039092169163df7f453b91602480820192602092909190829003018186803b158015611f0357600080fd5b505afa158015611f17573d6000803e3d6000fd5b505050506040513d6020811015611f2d57600080fd5b5051611f7c576040805162461bcd60e51b815260206004820152601960248201527813d3931657d4d554115497d05113525394d7d0531313d5d151603a1b604482015290519081900360640190fd5b600080546040805163c19ae2ed60e01b81526001600160a01b0385811660248301526004820192835286516044830152865193169363c19ae2ed93879387939092839260649092019160208701918190849084905b83811015611fe9578181015183820152602001611fd1565b50505050905090810190601f1680156120165780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610a8457600080fd5b6000612040612769565b6001600160a01b031663c59c57b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2257600080fd5b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156120c357600080fd5b505afa1580156120d7573d6000803e3d6000fd5b505050506040513d60208110156120ed57600080fd5b505161212e576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b600060405180606001604052808581526020018481526020018315158152509050612157612769565b6001600160a01b031663630f310f85836040518363ffffffff1660e01b8152600401612184929190613d16565b600060405180830381600087803b15801561219e57600080fd5b505af11580156121b2573d6000803e3d6000fd5b505050507ff7cce03a6fac68a25a7d5fbc0285c5ad178f0ebd8fcd33ed52e0695b9e1d0b64846040516121e59190613a61565b60405180910390a150505050565b6000805460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d602081101561226957600080fd5b50516122aa576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b8860006122b5612769565b6001600160a01b031663541fa9e76040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156122ef57600080fd5b505af1158015612303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123279190612f95565b905060006040518061018001604052808381526020018d6001600160a01b03168152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561238557600080fd5b505afa158015612399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bd919061375a565b60ff1681526020018c151581526020018b6001600160a01b031681526020018a8152602001898152602001888152602001876001600160a01b03168152602001861515815260200142815260200142815250905061244e81846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611d0657600080fd5b7fad4b90e063df7b4a2923a77e82769ddbfaad31cbebd03a93d93951cab140b5338260405161247d9190613a61565b60405180910390a1509a9950505050505050505050565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156124df57600080fd5b505afa1580156124f3573d6000803e3d6000fd5b505050506040513d602081101561250957600080fd5b505161254a576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b815115801590612562575061255d612036565b825111155b6125a160405180604001604052806016815260200175155392d393d5d397d410565351539517d351551213d160521b81525061046d85600001516111fe565b906125bf5760405162461bcd60e51b815260040161096f9190613c1c565b506000811180156125d757506125d3610ce0565b8111155b61260c6040518060400160405280601081526020016f554e4b4e4f574e5f43415445474f525960801b81525061046d846111fe565b9061262a5760405162461bcd60e51b815260040161096f9190613c1c565b50612633612769565b825160405163b542276760e01b81526001600160a01b03929092169163b542276791612663918690600401613d2f565b600060405180830381600087803b15801561267d57600080fd5b505af1158015612691573d6000803e3d6000fd5b505083516040517fb4692f109985f7be03460badace503fa5013612352e0b842d0ef1200f0dce0f193506126c59250613a61565b60405180910390a15050565b6000806126dd836108e3565b90506000806000806000856001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561272057600080fd5b505afa158015612734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612758919061370b565b50919b9a5050505050505050505050565b6002546001600160a01b031690565b60208101516000906001600160a01b0316158015906108dd5750506101200151151560011490565b60005460408051630935e01b60e21b815233600482015290516001600160a01b03909216916324d7806c91602480820192602092909190829003018186803b1580156127eb57600080fd5b505afa1580156127ff573d6000803e3d6000fd5b505050506040513d602081101561281557600080fd5b5051612856576040805162461bcd60e51b81526020600482015260136024820152600080516020613e23833981519152604482015290519081900360640190fd5b6000612860612769565b6001600160a01b0316636e07302b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561289857600080fd5b505afa1580156128ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d09190612f95565b8351909150158015906128e4575082518110155b6129156040518060400160405280601081526020016f1253959053125117d054d4d15517d25160821b815250611ea3565b906129335760405162461bcd60e51b815260040161096f9190613c1c565b5060006001600160a01b031683602001516001600160a01b0316141561298d6040518060400160405280601881526020017f494e41564c49445f434f4e54524143545f414444524553530000000000000000815250611ea3565b906129ab5760405162461bcd60e51b815260040161096f9190613c1c565b5060006001600160a01b03168361010001516001600160a01b031614156129e9604051806060016040528060238152602001613e0060239139611ea3565b90612a075760405162461bcd60e51b815260040161096f9190613c1c565b5060006001600160a01b031683602001516001600160a01b03161415612a616040518060400160405280601e81526020017f494e56414c49445f41535345545f434f4e54524143545f414444524553530000815250611ea3565b90612a7f5760405162461bcd60e51b815260040161096f9190613c1c565b5060055461010084015160405163518b04eb60e11b81526001600160a01b039092169163a31609d691612ab791869190600401613c2f565b600060405180830381600087803b158015612ad157600080fd5b505af1158015612ae5573d6000803e3d6000fd5b50505050612af1612769565b8351604051636971082560e11b81526001600160a01b03929092169163d2e2104a91612b21918790600401613cfd565b600060405180830381600087803b158015612b3b57600080fd5b505af1158015612b4f573d6000803e3d6000fd5b50505050505050565b604051806101000160405280600081526020016060815260200160008152602001600081526020016000815260200160608152602001606081526020016000151581525090565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820181905260c0820181905260e082015261010081018290526101208101829052610140810182905261016081019190915290565b604051806060016040528060008152602001606081526020016000151581525090565b80356106f481613dd9565b80516106f481613dd9565b600082601f830112612c4b578081fd5b81356020612c60612c5b83613d6b565b613d48565b82815281810190858301855b85811015612c9557612c83898684358b0101612d0d565b84529284019290840190600101612c6c565b5090979650505050505050565b600082601f830112612cb2578081fd5b81516020612cc2612c5b83613d6b565b82815281810190858301855b85811015612c9557612ce5898684518b0101612d59565b84529284019290840190600101612cce565b80356106f481613df1565b80516106f481613df1565b600082601f830112612d1d578081fd5b8135612d2b612c5b82613d88565b818152846020838601011115612d3f578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612d69578081fd5b8151612d77612c5b82613d88565b818152846020838601011115612d8b578283fd5b612d9c826020830160208701613da9565b949350505050565b805169ffffffffffffffffffff811681146106f457600080fd5b805160ff811681146106f457600080fd5b600060208284031215612de0578081fd5b8135610cd981613dd9565b600080600080600080600080610100898b031215612e07578384fd5b612e1089612c25565b9750612e1e60208a01612cf7565b9650612e2c60408a01612c25565b955060608901356001600160401b0380821115612e47578586fd5b612e538c838d01612d0d565b965060808b0135915080821115612e68578586fd5b612e748c838d01612d0d565b955060a08b0135915080821115612e89578485fd5b50612e968b828c01612d0d565b935050612ea560c08a01612c25565b9150612eb360e08a01612cf7565b90509295985092959890939650565b60006020808385031215612ed4578182fd5b82516001600160401b0380821115612eea578384fd5b818501915085601f830112612efd578384fd5b8151612f0b612c5b82613d6b565b81815284810190848601875b84811015612f865781518701604080601f19838f03011215612f37578a8bfd5b80518181018181108a82111715612f4a57fe5b8252828b015189811115612f5c578c8dfd5b612f6a8f8d83870101612d59565b8252509101518982015284529287019290870190600101612f17565b50909998505050505050505050565b600060208284031215612fa6578081fd5b5051919050565b600060208284031215612fbe578081fd5b81356001600160401b03811115612fd3578182fd5b612d9c84828501612d0d565b600060208284031215612ff0578081fd5b81516001600160401b03811115613005578182fd5b612d9c84828501612d59565b60008060408385031215613023578182fd5b82356001600160401b03811115613038578283fd5b61304485828601612d0d565b925050602083013561305581613dd9565b809150509250929050565b60008060408385031215613072578182fd5b82356001600160401b03811115613087578283fd5b61309385828601612d0d565b925050602083013561305581613df1565b600080604083850312156130b6578182fd5b82356001600160401b038111156130cb578283fd5b6130d785828601612d0d565b95602094909401359450505050565b600080604083850312156130f8578182fd5b82356001600160401b038082111561310e578384fd5b61311a86838701612d0d565b9350602085013591508082111561312f578283fd5b5061313c85828601612d0d565b9150509250929050565b600080600080600080600060e0888a031215613160578081fd5b87356001600160401b0380821115613176578283fd5b6131828b838c01612d0d565b985060208a0135975060408a0135965060608a0135955060808a01359150808211156131ac578283fd5b6131b88b838c01612c3b565b945060a08a01359150808211156131cd578283fd5b506131da8a828b01612c3b565b92505060c08801356131eb81613df1565b8091505092959891949750929550565b60006020828403121561320c578081fd5b81516001600160401b0380821115613222578283fd5b8184019150610180808387031215613238578384fd5b61324181613d48565b90508251815261325360208401612c30565b602082015261326460408401612dbe565b604082015261327560608401612d02565b606082015261328660808401612c30565b608082015260a08301518281111561329c578485fd5b6132a887828601612d59565b60a08301525060c0830151828111156132bf578485fd5b6132cb87828601612d59565b60c08301525060e0830151828111156132e2578485fd5b6132ee87828601612d59565b60e0830152506101009150613304828401612c30565b828201526101209150613318828401612d02565b91810191909152610140828101519082015261016091820151918101919091529392505050565b600060208284031215613350578081fd5b81516001600160401b0380821115613366578283fd5b9083019060608286031215613379578283fd5b60405160608101818110838211171561338e57fe5b604052825181526020830151828111156133a6578485fd5b6133b287828601612d59565b602083015250604083015192506133c883613df1565b6040810192909252509392505050565b6000602082840312156133e9578081fd5b81516001600160401b03808211156133ff578283fd5b8184019150610100808387031215613415578384fd5b61341e81613d48565b905082518152602083015182811115613435578485fd5b61344187828601612d59565b60208301525060408301516040820152606083015160608201526080830151608082015260a083015182811115613476578485fd5b61348287828601612ca2565b60a08301525060c083015182811115613499578485fd5b6134a587828601612ca2565b60c0830152506134b760e08401612d02565b60e082015295945050505050565b600080604083850312156134d7578182fd5b82356001600160401b03808211156134ed578384fd5b8185019150610100808388031215613503578485fd5b61350c81613d48565b905082358152602083013582811115613523578586fd5b61352f88828601612d0d565b60208301525060408301356040820152606083013560608201526080830135608082015260a083013582811115613564578586fd5b61357088828601612c3b565b60a08301525060c083013582811115613587578586fd5b61359388828601612c3b565b60c0830152506135a560e08401612cf7565b60e08201529660209590950135955050505050565b6000602082840312156135cb578081fd5b5035919050565b60008060008060008060008060006101208a8c0312156135f0578283fd5b8935985061360060208b01612c25565b975061360e60408b01612cf7565b965061361c60608b01612c25565b955060808a01356001600160401b0380821115613637578485fd5b6136438d838e01612d0d565b965060a08c0135915080821115613658578485fd5b6136648d838e01612d0d565b955060c08c0135915080821115613679578485fd5b506136868c828d01612d0d565b93505061369560e08b01612c25565b91506136a46101008b01612cf7565b90509295985092959850929598565b6000806000606084860312156136c7578081fd5b8335925060208401356001600160401b038111156136e3578182fd5b6136ef86828701612d0d565b925050604084013561370081613df1565b809150509250925092565b600080600080600060a08688031215613722578283fd5b61372b86612da4565b945060208601519350604086015192506060860151915061374e60808701612da4565b90509295509295909350565b60006020828403121561376b578081fd5b610cd982612dbe565b6001600160a01b03169052565b6000815180845260208085018081965082840281019150828601855b858110156137c75782840389526137b5848351613866565b9885019893509084019060010161379d565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b858110156137c757828403895261380884835161397d565b988501989350908401906001016137f0565b6000815180845260208085018081965082840281019150828601855b858110156137c757828403895261384e8483516139b2565b98850198935090840190600101613836565b15159052565b6000815180845261387e816020860160208601613da9565b601f01601f19169290920160200192915050565b60006101808251845260208301516138ad6020860182613774565b5060408301516138c06040860182613a3d565b5060608301516138d36060860182613860565b5060808301516138e66080860182613774565b5060a08301518160a08601526138fe82860182613866565b91505060c083015184820360c08601526139188282613866565b91505060e083015184820360e08601526139328282613866565b9150506101008084015161394882870182613774565b50506101208084015161395d82870182613860565b505061014083810151908501526101609283015192909301919091525090565b60008151835260208201516060602085015261399c6060850182613866565b6040938401511515949093019390935250919050565b60006101008251845260208301518160208601526139d282860182613866565b91505060408301516040850152606083015160608501526080830151608085015260a083015184820360a0860152613a0a8282613781565b91505060c083015184820360c0860152613a248282613781565b91505060e0830151151560e08501528091505092915050565b60ff169052565b60609190911b6bffffffffffffffffffffffff1916815260140190565b90815260200190565b60008251613a7c818460208701613da9565b9190910192915050565b90565b6000642c2824a29d60d91b82528351613aa9816005850160208801613da9565b601d60f91b6005918401918201528351613aca816006840160208801613da9565b01600601949350505050565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613b3d57603f19888603018452613b2b858351613892565b94509285019290850190600101613b0f565b5092979650505050505050565b600060208252610cd960208301846137d4565b600060408252613b7060408301856137d4565b8281036020840152613b82818561381a565b95945050505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613bf057888303603f1901855281518051878552613bd388860182613866565b918901519489019490945294870194925090860190600101613baf565b509098975050505050505050565b600060208252610cd9602083018461381a565b901515815260200190565b600060208252610cd96020830184613866565b600060408252613c426040830185613866565b905060018060a01b03831660208301529392505050565b600060408252613c6c6040830185613866565b90508260208301529392505050565b602080825260169082015275161412514e9054d4d15517d393d517d153905093115160521b604082015260600190565b602080825260129082015271161412514e955392d393d5d397d054d4d15560721b604082015260600190565b600060208252610cd96020830184613892565b600060208252610cd960208301846139b2565b600083825260406020830152612d9c6040830184613892565b600083825260406020830152612d9c604083018461397d565b600083825260406020830152612d9c60408301846139b2565b6040518181016001600160401b0381118282101715613d6357fe5b604052919050565b60006001600160401b03821115613d7e57fe5b5060209081020190565b60006001600160401b03821115613d9b57fe5b50601f01601f191660200190565b60005b83811015613dc4578181015183820152602001613dac565b83811115613dd3576000848401525b50505050565b6001600160a01b0381168114613dee57600080fd5b50565b8015158114613dee57600080fdfe494e41564c49445f50524943455f464545445f434f4e54524143545f414444524553534f4e4c595f41444d494e535f414c4c4f57454400000000000000000000000000585049453a56414c49445f53544f524147455f414444524553535f5245515549524544a26469706673582212209fbae181828089d56d92d2e0daecc664faac18ca894f065e16cb9a63ed85171464736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAsset(address,bool,address,string,string,string,address,bool)": {
        "details": "add a new asset to supported list",
        "params": {
          "contractAddress": "asset's contract address",
          "isEnabled": "if contract is enabled",
          "isPegged": "a  boolean describing wether its pegged  or not",
          "originalName": "if pegged, then original asset name",
          "originalSymbol": "if pegged, the original symbol",
          "peggedAssetGateway": "gateway for interacting with the asset"
        }
      },
      "addPaymentMethod(string,uint256,uint256,uint256,string[],string[],bool)": {
        "details": "add a new payment method",
        "params": {
          "categoryId": "category id for the new payment  type",
          "continents": "Supported continents",
          "countries": "supported countries",
          "isEnabled": "is this payment method enabled",
          "name": "payment method name"
        },
        "returns": {
          "_0": "uint256"
        }
      },
      "addPaymentMethodCategory(string,bool)": {
        "details": "add a new payment type category",
        "params": {
          "name": "category name in string"
        },
        "returns": {
          "_0": "uint256 new category  id"
        }
      },
      "getAllAssets()": {
        "details": "get all assets "
      },
      "getAsset(address)": {
        "details": "fetch asset by it contract address",
        "params": {
          "_contractAddress": "asset's contract address"
        },
        "returns": {
          "_0": "AssetsStructs.AssetItem"
        }
      },
      "getAssetById(uint256)": {
        "details": "getAssetById",
        "params": {
          "_id": "asset id"
        }
      },
      "getChainID()": {
        "details": "get chain id"
      },
      "getConfig(string)": {
        "params": {
          "_key": "config key "
        }
      },
      "getDataStore()": {
        "details": "this returns an instance of he same contract"
      },
      "getLatestPrice(string)": {
        "details": "get latest price",
        "params": {
          "_asset": "the asset which we need latest price for"
        }
      },
      "getPaymentMethod(uint256)": {
        "details": "getPaymentMethod",
        "params": {
          "_id": "paymentMethod id"
        }
      },
      "getPaymentMethods()": {
        "details": "get all payment types "
      },
      "getPaymentMethodsAndCategories()": {
        "details": "Fetch payment types and categories in a single query"
      },
      "getPaymentMethodsCategories()": {
        "details": "get all payment types categories ",
        "returns": {
          "_0": "(PaymentMethodsStructs.CategoryItem[] memory) CategoryNames Array with category id as array index"
        }
      },
      "getTotalPaymentMethods()": {
        "details": "getTotalPaymentMethods"
      },
      "getTotalPaymentMethodsCategories()": {
        "details": "getTotalPaymentMethods"
      },
      "isAssetSupported(address)": {
        "details": "is the provided asset contract supported",
        "params": {
          "_contractAddress": "asset contract address"
        }
      },
      "isValidAssetItem(uint256)": {
        "params": {
          "_id": "asset id"
        }
      },
      "removePaymentMethod(uint256)": {
        "details": "remove  a payment method ",
        "params": {
          "_id": "the payment method id"
        }
      },
      "removePaymentMethodCategory(uint256)": {
        "details": "delete a cetegory",
        "params": {
          "_id": "category  id"
        }
      },
      "setAssetPriceFeedContract(string,address)": {
        "details": "set priceFeed contract",
        "params": {
          "_asset": "the asset  to fetch price feed",
          "_contract": "feed contract"
        }
      },
      "setConfigData(string,bytes32)": {
        "params": {
          "_key": "config key",
          "_value": "cofig data"
        }
      },
      "setPermissionManager(address)": {
        "details": "set permission manager contract"
      },
      "statusMsg(string)": {
        "details": "status msg",
        "params": {
          "_text": "status text  "
        }
      },
      "statusMsg(string,bytes32)": {
        "details": "status msg",
        "params": {
          "_params": "he parameters ",
          "_text": "status text  "
        }
      },
      "statusMsg(string,string)": {
        "details": "status msg",
        "params": {
          "_params": "he parameters ",
          "_text": "status text  "
        }
      },
      "updateAsset(uint256,address,bool,address,string,string,string,address,bool)": {
        "details": "add a new asset to supported list",
        "params": {
          "contractAddress": "asset's contract address",
          "id": "asset Id",
          "isEnabled": "if contract is enabled",
          "isPegged": "a  boolean describing wether its pegged  or not",
          "originalName": "if pegged, then original asset name",
          "originalSymbol": "if pegged, the original symbol",
          "peggedAssetGateway": "the pegged asset gateway"
        }
      },
      "updatePaymentMethod((uint256,string,uint256,uint256,uint256,string[],string[],bool),uint256)": {
        "details": "update  payment type info",
        "params": {
          "_dataToSave": "payment method data",
          "categoryId": "the new category id of the payment type"
        }
      },
      "updatePaymentMethodCategory(uint256,string,bool)": {
        "details": "add a new payment type category",
        "params": {
          "categoryId": "the category id",
          "isEnabled": "if the category is enabled or not",
          "newCategoryName": "new category name to change"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "STORAGE_CONTRACT()": {
        "notice": "Store address"
      },
      "getAllConfigs()": {
        "notice": "get all config data"
      },
      "getConfig(string)": {
        "notice": "get config"
      },
      "getPriceFeedContract(string)": {
        "notice": "getAggregatorV3Interface"
      },
      "grantRole(string,address)": {
        "notice": "grant role"
      },
      "hasRole(string,address)": {
        "notice": "hasRole"
      },
      "isValidAssetItem(uint256)": {
        "notice": "isValidAsset using id"
      },
      "setConfigData(string,bytes32)": {
        "notice": "setConfig"
      },
      "setStorage(address)": {
        "notice": "setStorage"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3021,
        "contract": "contracts/Factory.sol:Factory",
        "label": "PERMISSION_MANAGER",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPermissionManager)3015"
      },
      {
        "astId": 3023,
        "contract": "contracts/Factory.sol:Factory",
        "label": "pmInitialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3025,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3915,
        "contract": "contracts/Factory.sol:Factory",
        "label": "STORAGE_CONTRACT",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStorage)4275"
      },
      {
        "astId": 3917,
        "contract": "contracts/Factory.sol:Factory",
        "label": "dataStoreInitialized",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3179,
        "contract": "contracts/Factory.sol:Factory",
        "label": "providerName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3183,
        "contract": "contracts/Factory.sol:Factory",
        "label": "feedsContracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 1029,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(PriceFeed)3449"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPermissionManager)3015": {
        "encoding": "inplace",
        "label": "contract IPermissionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStorage)4275": {
        "encoding": "inplace",
        "label": "contract IStorage",
        "numberOfBytes": "20"
      },
      "t_contract(PriceFeed)3449": {
        "encoding": "inplace",
        "label": "contract PriceFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}